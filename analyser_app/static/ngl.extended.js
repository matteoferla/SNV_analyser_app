NGL.specialOps = {'note': `This is a monkeypatch to allow HTML control of the structure using the markup defined in ngl.matteoferla.com/markup
/* This script adds to NGL the following...

* NGL.stageIds an object taht stores id: stages
* NGL.getStage(id) is a getter for this.
* NGL.specialOps
** NGL.specialOps.showDomain(id, selection, color, view), which focuses stage to show the given selection with the given color
** NGL.specialOps.showResidue(id, selection, color, radius, view), which focuses on the selection and their neighbourhood by n radius
** NGL.specialOps.showClash(id, selection, color, radius, tolerance, view) which shows the clashes that selection may have
** NGL.specialOps.slowOrient deals with the view if provided for these previous three.
** NGL.specialOps.showTitle(id,text) shows the title.
** NGL.specialOps.multiLoader(id, proteins, backgroundColor, startIndex), see below about proteins object
** NGL.specialOps.postInitialise() gets called by load if the stage was not set via multiLoader
** NGL.specialOps.load(option)
** NGL.specialOps.removeImg() switches the image off
** NGL.specialOps._run_loadFx() and a few others.
* NGL.Stage extra prototypes
** NGL.Stage.prototype.getComponentByType allowing stage objects to return a component.
** NGL.Stage.prototype.removeComponentsbyName array version.
** NGL.Stage.prototype.removeClashes removes clashes and the rotation.
* $.prototype.protein to enable a link
NB. this file ends with $('[data-toggle="protein"]').protein(); to activate all links.

proteins is an array of {name: 'unique_name', type: 'rcsb' (default) | 'file' | 'data', value: xxx, 'ext': 'pdb' (default), loadFx: xxx}
where the optional loadFx is a function that is run on loading.
`};

NGL.specialOps.version = '0.3.0';

NGL.stageIds = {};

NGL.getStage = function (id) {
    // returns a stage stored in stageIds ...
    // unless somehow a stage was given.
    if (typeof id === 'string') {
        id = id.replace('#','');
        if (id in NGL.stageIds) {
            return NGL.stageIds[id];
        }
        else if ($('#'+id + ' img').length !== 0) {
            if (NGL.Debug) {console.log('You have not activated the stage yet!');}
            NGL.specialOps.load(0);}
        else if (window.stage !== undefined) {
            if (NGL.Debug) {console.log('No stored stage in .stageIds, but there is a window.stage...');}
            return window.stage;
        } else {
            if (NGL.Debug) {console.log('No stored stage in .stageIds nor is a window.stage...');}
            return undefined;
        }
    } else if (id.compList !== undefined) { //it's an Stage
        return id;

    } else if (id.stage !== undefined) { //it's an Component
        return id.stage;
    } else {
        if (NGL.Debug) {console.log('No idea what this is.');}
    }
};

///////////////////////////// NGL.SpecialOps ///////////////

NGL.specialOps.slowOrient = function (id, view) {
    //wrapper for a string view.
    NGL.getStage(id).getComponentByType('structure').autoView(2000); //zoom out.
    if (typeof view !== 'string') {
        NGL.getStage(id).animationControls.orient(view, 2000);
    } else {NGL.getStage(id).animationControls.orient(JSON.parse(view), 2000);}
};

NGL.specialOps.showDomain = function (id, selection, color, view) {
        if (NGL.debug) {console.log('Show domain '+selection)}
        // Prepare
        NGL.specialOps.postInitialise(); //worst case schenario prevention.
        color = color || "green";
        //selection = typeof selection === "string" ? new NGL.Selection(selection) : selection;
        var protein = NGL.getStage(id).getComponentByType('structure');
        NGL.getStage(id).removeClashes();
        protein.removeAllRepresentations();
        // Color in!
        var schemeId = NGL.ColormakerRegistry.addSelectionScheme([[color, selection],["white", "*"]]);
        protein.addRepresentation( "cartoon", {color: schemeId, smoothSheet: true});
        if (!! view) {NGL.specialOps.slowOrient(id, view);}
        else {
        protein.autoView(2000);
        protein.autoView(selection, 2000);
        }
    };

NGL.specialOps.showResidue = function (id, selection, color, radius, view) {
        if (NGL.debug) {console.log('Show residues '+selection)}
        // Prepare
        NGL.specialOps.postInitialise(); //worst case schenario prevention.
        var protein = NGL.getStage(id).getComponentByType('structure');
        color = color || "hotpink";
        radius = radius || 4;
        //selection = typeof selection === "string" ? new NGL.Selection(selection) : selection;
        // Remove all bar cartoon-like representation
        ['ball+stick', 'contact', 'hyperball', 'licorice','line', 'point','spacefill', 'surface'].map(function (value) {
            protein.stage.getRepresentationsByName(value).forEach(function (o) {
                protein.removeRepresentation(o);
            }); //.forEach representation
        }); //.map representation name
        //remove clashes
        NGL.getStage(id).removeClashes();
        var schemeId = NGL.ColormakerRegistry.addSelectionScheme([
            [color,'_C'],["blue",'_N'],["red",'_O'],["white",'_H'],["yellow",'_S'],["orange","*"] //this is such a weird way of doing it.
        ]);
        var selector = new NGL.Selection(selection.toString());
        var atomSet = protein.structure.getAtomSetWithinSelection( selector , parseFloat(radius) );
        // expand selection to complete groups
        var atomSet2 = protein.structure.getAtomSetWithinGroup( atomSet );
        var licoriceRep = protein.addRepresentation( "licorice", { sele: atomSet2.toSeleString()+ ' and not '+selection.toString()} );
        var hyperRep = protein.addRepresentation( "hyperball", { sele: selection.toString(), color: schemeId} );
        protein.addRepresentation("contact", {
            masterModelIndex: 0,
            weakHydrogenBond: true,
            maxHbondDonPlaneAngle: 35,
            sele: atomSet2.toSeleString()
          });
        if (!! view) {NGL.specialOps.slowOrient(id, view);}
        else {
        protein.autoView(2000);
        protein.autoView(atomSet2.toSeleString(), 2000);
        }
    };

NGL.specialOps.showClash = function (id, selection, color, radius, tolerance, view) {
    // Prepare
    NGL.specialOps.postInitialise(); //worst case schenario prevention.
    tolerance= tolerance || 1; //how much is the wiggle room. 0.2 &Aring; is probs good.
    radius = radius || 2;
    NGL.specialOps.showResidue(id, selection, color, radius, view);
    var protein = NGL.getStage(id).getComponentByType('structure');
    // Find what clashes...
    protein.structure.getView(new NGL.Selection(selection.toString())).eachAtom(function (atom) {
    protein.structure.eachAtom(function (neighbour) {
        if ((atom.distanceTo(neighbour) < atom.vdw + neighbour.vdw - tolerance) &&
            (!atom.hasBondTo(neighbour))                          //they are bonded so must be fine.
            && (atom.residueIndex !== neighbour.residueIndex)) { //self clashes are fine.
                var position = [atom.x / 2 + neighbour.x / 2, atom.y / 2 + neighbour.y / 2, atom.z / 2 + neighbour.z / 2];
                console.log('Clash between '+atom.atomname+' of residue ('+atom.vdw.toString()+' &Aring;) '+atom.residueIndex+' and '+
                    neighbour.atomname+' of residue '+neighbour.residueIndex+' ('+atom.vdw.toString()+' &Aring;). Distance: '+atom.distanceTo(neighbour).toString()+' cutoff: '+(atom.vdw + neighbour.vdw - tolerance).toString());
                // create the ball
                var refmesh=[0.1, -0.11, 0.02, 0.07, -0.14, 0.0, 0.1, -0.11, -0.02, -0.05, -0.14, -0.04, -0.1, -0.11, -0.04, -0.07, -0.11, -0.08, 0.0, -0.11, 0.11, -0.02, -0.14, 0.08, 0.02, -0.14, 0.06, 0.05, -0.11, -0.09, 0.07, -0.14, -0.05, 0.02, -0.14, -0.06, 0.1, 0.0, 0.13, 0.09, 0.0, 0.13, 0.05, 0.0, 0.15, 0.13, 0.0, 0.09, 0.13, 0.04, 0.06, 0.1, 0.04, 0.11, 0.16, 0.0, -0.05, 0.16, 0.0, -0.05, 0.16, 0.0, 0.0, -0.05, 0.0, 0.15, -0.02, 0.04, 0.15, -0.07, 0.04, 0.13, -0.16, 0.0, 0.0, -0.15, 0.04, 0.02, -0.15, 0.04, -0.02, -0.02, 0.04, -0.15, 0.0, 0.0, -0.17, -0.05, 0.0, -0.15, -0.09, 0.0, 0.13, -0.1, 0.0, 0.13, -0.13, 0.0, 0.09, -0.1, -0.04, -0.11, -0.13, -0.04, -0.06, -0.13, 0.0, -0.09, 0.07, -0.04, -0.13, 0.02, -0.04, -0.15, 0.05, 0.0, -0.15, 0.13, 0.04, -0.06, 0.16, 0.0, -0.05, 0.13, 0.0, -0.09, 0.07, 0.11, 0.08, 0.1, 0.11, 0.04, 0.05, 0.14, 0.04, -0.05, 0.11, 0.09, 0.0, 0.11, 0.11, -0.02, 0.14, 0.06, -0.1, 0.11, -0.02, -0.1, 0.11, 0.02, -0.07, 0.14, 0.0, 0.0, 0.11, -0.11, -0.05, 0.11, -0.09, -0.02, 0.14, -0.06, 0.1, 0.11, -0.04, 0.07, 0.11, -0.08, 0.05, 0.14, -0.04, 0.11, 0.08, 0.08, 0.13, 0.04, 0.06, 0.11, 0.08, 0.08, 0.02, -0.04, 0.15, 0.0, 0.0, 0.17, 0.02, -0.04, 0.15, 0.13, 0.0, -0.09, 0.16, 0.0, -0.05, 0.13, 0.0, -0.09, 0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.05, 0.0, -0.15, 0.04, -0.08, 0.13, 0.02, -0.04, 0.15, 0.04, -0.08, 0.13, 0.1, 0.0, -0.13, 0.13, 0.0, -0.09, 0.1, 0.0, -0.13, 0.0, -0.11, 0.11, 0.04, -0.08, 0.13, 0.0, -0.11, 0.11, 0.07, -0.04, -0.13, 0.1, 0.0, -0.13, 0.07, -0.04, -0.13, 0.09, 0.0, -0.13, 0.05, 0.0, -0.15, 0.09, 0.0, -0.13, 0.1, 0.04, -0.11, 0.09, 0.0, -0.13, 0.1, 0.04, -0.11, 0.04, -0.08, -0.13, 0.07, -0.04, -0.13, 0.04, -0.08, -0.13, -0.04, 0.08, -0.13, -0.07, 0.04, -0.13, -0.04, 0.08, -0.13, -0.02, -0.14, 0.08, 0.0, -0.11, 0.11, -0.02, -0.14, 0.08, 0.05, -0.11, -0.09, 0.04, -0.08, -0.13, 0.05, -0.11, -0.09, -0.05, 0.11, -0.09, -0.04, 0.08, -0.13, -0.05, 0.11, -0.09, -0.07, -0.11, 0.08, -0.02, -0.14, 0.08, -0.07, -0.11, 0.08, 0.07, -0.14, 0.05, 0.1, -0.11, 0.02, 0.07, -0.14, 0.05, 0.07, -0.14, -0.05, 0.05, -0.11, -0.09, 0.07, -0.14, -0.05, -0.07, 0.14, -0.05, -0.05, 0.11, -0.09, -0.07, 0.14, -0.05, 0.05, -0.11, 0.09, 0.07, -0.14, 0.05, 0.05, -0.11, 0.09, 0.1, -0.11, -0.02, 0.07, -0.14, -0.05, 0.1, -0.11, -0.02, -0.1, 0.11, -0.02, -0.07, 0.14, -0.05, -0.1, 0.11, -0.02, 0.04, -0.08, 0.13, 0.05, -0.11, 0.09, 0.04, -0.08, 0.13, -0.14, 0.08, 0.0, -0.1, 0.11, -0.02, -0.14, 0.08, 0.0, 0.07, -0.04, 0.13, 0.04, -0.08, 0.13, 0.07, -0.04, 0.13, -0.07, 0.14, 0.05, -0.02, 0.14, 0.06, -0.07, 0.14, 0.05, 0.14, -0.08, 0.0, 0.1, -0.11, -0.02, 0.14, -0.08, 0.0, -0.15, 0.04, -0.02, -0.14, 0.08, 0.0, -0.15, 0.04, -0.02, -0.07, 0.14, 0.0, -0.07, 0.14, 0.05, -0.07, 0.14, 0.0, 0.15, -0.04, -0.02, 0.14, -0.08, 0.0, 0.15, -0.04, -0.02, 0.1, 0.0, 0.13, 0.07, -0.04, 0.13, 0.1, 0.0, 0.13, 0.04, -0.08, -0.13, 0.0, -0.11, -0.11, 0.04, -0.08, -0.13, -0.16, 0.0, -0.05, -0.15, 0.04, -0.02, -0.16, 0.0, -0.05, 0.13, 0.0, 0.09, 0.1, 0.0, 0.13, 0.13, 0.0, 0.09, -0.07, 0.14, -0.05, -0.07, 0.14, 0.0, -0.07, 0.14, -0.05, 0.02, -0.04, -0.15, 0.04, -0.08, -0.13, 0.02, -0.04, -0.15, -0.13, 0.0, -0.09, -0.16, 0.0, -0.05, -0.13, 0.0, -0.09, -0.02, 0.14, -0.06, -0.07, 0.14, -0.05, -0.02, 0.14, -0.06, 0.16, 0.0, 0.05, 0.13, 0.0, 0.09, 0.16, 0.0, 0.05, 0.0, 0.0, -0.17, 0.02, -0.04, -0.15, 0.0, 0.0, -0.17, 0.15, -0.04, 0.02, 0.16, 0.0, 0.05, 0.15, -0.04, 0.02, 0.02, 0.14, -0.08, -0.02, 0.14, -0.06, 0.02, 0.14, -0.08, -0.05, 0.0, -0.15, 0.0, 0.0, -0.17, -0.05, 0.0, -0.15, -0.1, 0.0, -0.13, -0.13, 0.0, -0.09, -0.1, 0.0, -0.13, 0.05, 0.14, -0.04, 0.02, 0.14, -0.08, 0.05, 0.14, -0.04, -0.07, 0.04, -0.13, -0.1, 0.0, -0.13, -0.07, 0.04, -0.13, -0.09, 0.0, -0.13, -0.05, 0.0, -0.15, -0.09, 0.0, -0.13, -0.14, 0.08, 0.0, -0.15, 0.04, 0.02, -0.14, 0.08, 0.0, 0.14, -0.08, 0.0, 0.15, -0.04, 0.02, 0.14, -0.08, 0.0, 0.08, 0.14, 0.0, 0.05, 0.14, -0.04, 0.08, 0.14, 0.0, -0.1, -0.04, -0.11, -0.09, 0.0, -0.13, -0.1, -0.04, -0.11, -0.1, 0.11, 0.02, -0.14, 0.08, 0.0, -0.1, 0.11, 0.02, 0.1, -0.11, 0.02, 0.14, -0.08, 0.0, 0.1, -0.11, 0.02, 0.05, 0.14, 0.04, 0.08, 0.14, 0.0, 0.05, 0.14, 0.04, -0.02, -0.14, 0.08, -0.05, -0.14, 0.04, -0.02, -0.14, 0.08, -0.11, -0.08, -0.08, -0.1, -0.04, -0.11, -0.11, -0.08, -0.08, -0.07, 0.14, 0.05, -0.1, 0.11, 0.02, -0.07, 0.14, 0.05, 0.02, -0.14, 0.06, -0.02, -0.14, 0.08, 0.02, -0.14, 0.06, -0.07, -0.11, -0.08, -0.11, -0.08, -0.08, -0.07, -0.11, -0.08, -0.05, 0.11, 0.09, -0.07, 0.14, 0.05, -0.05, 0.11, 0.09, 0.02, 0.14, 0.08, 0.05, 0.14, 0.04, 0.02, 0.14, 0.08, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, -0.1, -0.11, 0.04, -0.02, -0.14, -0.08, -0.07, -0.11, -0.08, -0.02, -0.14, -0.08, 0.14, -0.08, 0.0, 0.15, -0.04, 0.02, 0.14, -0.08, 0.0, -0.07, 0.04, 0.13, -0.04, 0.08, 0.13, -0.07, 0.04, 0.13, 0.1, 0.11, 0.04, 0.11, 0.08, 0.08, 0.1, 0.11, 0.04, 0.0, -0.11, -0.11, -0.02, -0.14, -0.08, 0.0, -0.11, -0.11, -0.11, -0.08, -0.08, -0.1, -0.11, -0.04, -0.11, -0.08, -0.08, 0.15, -0.04, 0.02, 0.16, 0.0, 0.05, 0.15, -0.04, 0.02, -0.1, 0.0, 0.13, -0.07, 0.04, 0.13, -0.1, 0.0, 0.13, 0.09, 0.14, 0.0, 0.1, 0.11, 0.04, 0.09, 0.14, 0.0, -0.13, -0.04, -0.06, -0.11, -0.08, -0.08, -0.13, -0.04, -0.06, 0.07, -0.14, 0.05, 0.02, -0.14, 0.06, 0.07, -0.14, 0.05, -0.13, 0.0, 0.09, -0.1, 0.0, 0.13, -0.13, 0.0, 0.09, 0.1, 0.11, -0.04, 0.09, 0.14, 0.0, 0.1, 0.11, -0.04, 0.13, 0.0, 0.09, 0.1, 0.0, 0.13, 0.13, 0.0, 0.09, -0.16, 0.0, -0.05, -0.13, -0.04, -0.06, -0.16, 0.0, -0.05, -0.02, -0.14, 0.08, -0.05, -0.14, 0.04, -0.02, -0.14, 0.08, 0.11, 0.08, -0.08, 0.1, 0.11, -0.04, 0.11, 0.08, -0.08, -0.16, 0.0, 0.0, -0.16, 0.0, -0.05, -0.16, 0.0, 0.0, -0.16, 0.0, 0.05, -0.13, 0.0, 0.09, -0.16, 0.0, 0.05, 0.13, 0.04, -0.06, 0.11, 0.08, -0.08, 0.13, 0.04, -0.06, 0.07, -0.04, 0.13, 0.04, -0.08, 0.13, 0.07, -0.04, 0.13, -0.15, 0.04, 0.02, -0.16, 0.0, 0.05, -0.15, 0.04, 0.02, -0.16, 0.0, 0.05, -0.16, 0.0, 0.0, -0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.13, 0.0, 0.09, 0.16, 0.0, 0.05, -0.04, 0.08, 0.13, -0.02, 0.04, 0.15, -0.04, 0.08, 0.13, 0.16, 0.0, -0.05, 0.13, 0.04, -0.06, 0.16, 0.0, -0.05, -0.13, -0.04, 0.06, -0.16, 0.0, 0.05, -0.13, -0.04, 0.06, 0.04, -0.08, 0.13, 0.05, -0.11, 0.09, 0.04, -0.08, 0.13, 0.0, 0.11, 0.11, -0.04, 0.08, 0.13, 0.0, 0.11, 0.11, 0.16, 0.0, 0.0, 0.16, 0.0, -0.05, 0.16, 0.0, 0.0, -0.11, -0.08, 0.08, -0.13, -0.04, 0.06, -0.11, -0.08, 0.08, 0.1, 0.0, 0.13, 0.07, -0.04, 0.13, 0.1, 0.0, 0.13, 0.02, 0.14, 0.08, 0.0, 0.11, 0.11, 0.02, 0.14, 0.08, -0.1, -0.11, 0.04, -0.11, -0.08, 0.08, -0.1, -0.11, 0.04, 0.07, 0.11, 0.08, 0.02, 0.14, 0.08, 0.07, 0.11, 0.08, 0.16, 0.0, 0.05, 0.16, 0.0, 0.0, 0.16, 0.0, 0.05, 0.05, -0.11, 0.09, 0.07, -0.14, 0.05, 0.05, -0.11, 0.09, 0.13, 0.04, 0.06, 0.16, 0.0, 0.05, 0.13, 0.04, 0.06, 0.07, -0.14, 0.05, 0.1, -0.11, 0.02, 0.07, -0.14, 0.05, 0.11, 0.08, 0.08, 0.07, 0.11, 0.08, 0.11, 0.08, 0.08, 0.11, 0.08, -0.08, 0.1, 0.04, -0.11, 0.11, 0.08, -0.08, -0.09, -0.14, 0.0, -0.1, -0.11, 0.04, -0.09, -0.14, 0.0, 0.1, 0.04, 0.11, 0.11, 0.08, 0.08, 0.1, 0.04, 0.11, 0.07, 0.11, -0.08, 0.11, 0.08, -0.08, 0.07, 0.11, -0.08, -0.1, -0.11, -0.04, -0.09, -0.14, 0.0, -0.1, -0.11, -0.04, -0.11, -0.08, 0.08, -0.07, -0.11, 0.08, -0.11, -0.08, 0.08, 0.09, 0.0, 0.13, 0.1, 0.04, 0.11, 0.09, 0.0, 0.13, 0.02, 0.14, -0.08, 0.07, 0.11, -0.08, 0.02, 0.14, -0.08, -0.1, -0.04, 0.11, -0.11, -0.08, 0.08, -0.1, -0.04, 0.11, 0.05, 0.0, 0.15, 0.09, 0.0, 0.13, 0.05, 0.0, 0.15, 0.0, 0.11, -0.11, 0.02, 0.14, -0.08, 0.0, 0.11, -0.11, -0.09, 0.0, 0.13, -0.1, -0.04, 0.11, -0.09, 0.0, 0.13, -0.04, 0.08, -0.13, 0.0, 0.11, -0.11, -0.04, 0.08, -0.13, -0.05, 0.0, 0.15, -0.09, 0.0, 0.13, -0.05, 0.0, 0.15, 0.0, 0.0, 0.17, 0.05, 0.0, 0.15, 0.0, 0.0, 0.17, -0.02, 0.04, -0.15, -0.04, 0.08, -0.13, -0.02, 0.04, -0.15, -0.02, 0.04, 0.15, 0.0, 0.0, 0.17, -0.02, 0.04, 0.15, 0.0, 0.0, 0.17, -0.05, 0.0, 0.15, 0.0, 0.0, 0.17, 0.16, 0.0, -0.05, 0.15, -0.04, -0.02, 0.16, 0.0, -0.05, 0.0, 0.0, -0.17, -0.02, 0.04, -0.15, 0.0, 0.0, -0.17, 0.16, 0.0, -0.05, 0.15, -0.04, -0.02, 0.16, 0.0, -0.05, 0.0, 0.0, 0.17, -0.05, 0.0, 0.15, 0.0, 0.0, 0.17, -0.02, 0.04, 0.15, 0.0, 0.0, 0.17, -0.02, 0.04, 0.15, -0.02, 0.04, -0.15, -0.04, 0.08, -0.13, -0.02, 0.04, -0.15, 0.0, 0.0, 0.17, 0.05, 0.0, 0.15, 0.0, 0.0, 0.17, -0.05, 0.0, 0.15, -0.09, 0.0, 0.13, -0.05, 0.0, 0.15, -0.04, 0.08, -0.13, 0.0, 0.11, -0.11, -0.04, 0.08, -0.13, -0.09, 0.0, 0.13, -0.1, -0.04, 0.11, -0.09, 0.0, 0.13, 0.0, 0.11, -0.11, 0.02, 0.14, -0.08, 0.0, 0.11, -0.11, 0.05, 0.0, 0.15, 0.09, 0.0, 0.13, 0.05, 0.0, 0.15, -0.1, -0.04, 0.11, -0.11, -0.08, 0.08, -0.1, -0.04, 0.11, 0.02, 0.14, -0.08, 0.07, 0.11, -0.08, 0.02, 0.14, -0.08, 0.09, 0.0, 0.13, 0.1, 0.04, 0.11, 0.09, 0.0, 0.13, -0.11, -0.08, 0.08, -0.07, -0.11, 0.08, -0.11, -0.08, 0.08, -0.1, -0.11, -0.04, -0.09, -0.14, 0.0, -0.1, -0.11, -0.04, 0.07, 0.11, -0.08, 0.11, 0.08, -0.08, 0.07, 0.11, -0.08, 0.1, 0.04, 0.11, 0.11, 0.08, 0.08, 0.1, 0.04, 0.11, -0.09, -0.14, 0.0, -0.1, -0.11, 0.04, -0.09, -0.14, 0.0, 0.11, 0.08, -0.08, 0.1, 0.04, -0.11, 0.11, 0.08, -0.08, 0.11, 0.08, 0.08, 0.07, 0.11, 0.08, 0.11, 0.08, 0.08, 0.13, 0.04, 0.06, 0.16, 0.0, 0.05, 0.13, 0.04, 0.06, 0.16, 0.0, 0.05, 0.16, 0.0, 0.0, 0.16, 0.0, 0.05, 0.07, 0.11, 0.08, 0.02, 0.14, 0.08, 0.07, 0.11, 0.08, -0.1, -0.11, 0.04, -0.11, -0.08, 0.08, -0.1, -0.11, 0.04, 0.02, 0.14, 0.08, 0.0, 0.11, 0.11, 0.02, 0.14, 0.08, -0.11, -0.08, 0.08, -0.13, -0.04, 0.06, -0.11, -0.08, 0.08, 0.16, 0.0, 0.0, 0.16, 0.0, -0.05, 0.16, 0.0, 0.0, -0.05, -0.14, 0.04, -0.08, -0.14, 0.0, -0.05, -0.14, 0.04, 0.0, 0.11, 0.11, -0.04, 0.08, 0.13, 0.0, 0.11, 0.11, -0.13, -0.04, 0.06, -0.16, 0.0, 0.05, -0.13, -0.04, 0.06, 0.16, 0.0, -0.05, 0.13, 0.04, -0.06, 0.16, 0.0, -0.05, -0.08, -0.14, 0.0, -0.05, -0.14, -0.04, -0.08, -0.14, 0.0, -0.04, 0.08, 0.13, -0.02, 0.04, 0.15, -0.04, 0.08, 0.13, -0.16, 0.0, 0.05, -0.16, 0.0, 0.0, -0.16, 0.0, 0.05, -0.15, 0.04, 0.02, -0.16, 0.0, 0.05, -0.15, 0.04, 0.02, 0.13, 0.04, -0.06, 0.11, 0.08, -0.08, 0.13, 0.04, -0.06, -0.16, 0.0, 0.05, -0.13, 0.0, 0.09, -0.16, 0.0, 0.05, -0.16, 0.0, 0.0, -0.16, 0.0, -0.05, -0.16, 0.0, 0.0, 0.11, 0.08, -0.08, 0.1, 0.11, -0.04, 0.11, 0.08, -0.08, -0.05, -0.14, -0.04, -0.02, -0.14, -0.08, -0.05, -0.14, -0.04, -0.16, 0.0, -0.05, -0.13, -0.04, -0.06, -0.16, 0.0, -0.05, -0.02, -0.14, -0.08, 0.02, -0.14, -0.06, -0.02, -0.14, -0.08, 0.1, 0.11, -0.04, 0.09, 0.14, 0.0, 0.1, 0.11, -0.04, -0.13, 0.0, 0.09, -0.1, 0.0, 0.13, -0.13, 0.0, 0.09, -0.13, -0.04, -0.06, -0.11, -0.08, -0.08, -0.13, -0.04, -0.06, 0.09, 0.14, 0.0, 0.1, 0.11, 0.04, 0.09, 0.14, 0.0, 0.02, -0.14, -0.06, 0.07, -0.14, -0.05, 0.02, -0.14, -0.06, -0.1, 0.0, 0.13, -0.07, 0.04, 0.13, -0.1, 0.0, 0.13, -0.11, -0.08, -0.08, -0.1, -0.11, -0.04, -0.11, -0.08, -0.08, 0.07, -0.14, -0.05, 0.07, -0.14, 0.0, 0.07, -0.14, -0.05, 0.0, -0.11, -0.11, -0.02, -0.14, -0.08, 0.0, -0.11, -0.11, 0.1, 0.11, 0.04, 0.11, 0.08, 0.08, 0.1, 0.11, 0.04, -0.07, 0.04, 0.13, -0.04, 0.08, 0.13, -0.07, 0.04, 0.13, -0.02, -0.14, -0.08, -0.07, -0.11, -0.08, -0.02, -0.14, -0.08, 0.11, 0.08, 0.08, 0.13, 0.04, 0.06, 0.11, 0.08, 0.08, 0.07, -0.14, 0.0, 0.07, -0.14, 0.05, 0.07, -0.14, 0.0, -0.04, 0.08, 0.13, -0.05, 0.11, 0.09, -0.04, 0.08, 0.13, -0.02, 0.14, 0.06, 0.02, 0.14, 0.08, -0.02, 0.14, 0.06, 0.07, -0.14, 0.05, 0.02, -0.14, 0.06, 0.07, -0.14, 0.05, 0.02, -0.14, -0.06, 0.01, -0.38, -0.01, 0.0, -0.38, -0.01, -0.02, 0.14, 0.06, -0.01, 0.38, 0.01, -0.07, 0.14, 0.05, 0.1, -0.11, -0.02, 0.28, -0.17, -0.18, 0.14, -0.08, 0.0, -0.15, 0.04, -0.02, -0.28, 0.17, -0.18, -0.29, 0.16, -0.19, -0.07, 0.14, 0.0, -0.01, 0.38, 0.01, -0.01, 0.38, 0.0, 0.15, -0.04, -0.02, 0.28, -0.17, -0.18, 0.29, -0.16, -0.19, -0.05, -0.14, -0.04, 0.0, -0.38, -0.01, -0.01, -0.38, 0.0, 0.0, -0.11, -0.11, -0.08, -0.17, -0.33, 0.04, -0.08, -0.13, -0.15, 0.04, -0.02, -0.29, 0.15, -0.19, -0.16, 0.0, -0.05, -0.07, 0.14, 0.0, -0.01, 0.38, -0.01, -0.07, 0.14, -0.05, 0.02, -0.04, -0.15, -0.08, -0.17, -0.33, -0.09, -0.16, -0.33, -0.13, 0.0, -0.09, -0.29, 0.15, -0.19, -0.28, 0.15, -0.2, 0.07, -0.14, 0.0, 0.01, -0.38, -0.01, 0.07, -0.14, -0.05, -0.02, 0.14, -0.06, -0.01, 0.38, -0.01, 0.0, 0.38, -0.01, 0.02, -0.04, -0.15, -0.09, -0.15, -0.33, 0.0, 0.0, -0.17, -0.02, 0.14, -0.06, 0.0, 0.38, -0.01, 0.02, 0.14, -0.08, -0.05, 0.0, -0.15, -0.09, -0.15, -0.33, -0.1, -0.15, -0.33, -0.13, 0.0, -0.09, -0.27, 0.15, -0.21, -0.1, 0.0, -0.13, 0.07, -0.14, 0.0, 0.01, -0.38, 0.01, 0.01, -0.38, 0.0, 0.05, 0.14, -0.04, 0.0, 0.38, -0.01, 0.01, 0.38, 0.0, -0.07, 0.04, -0.13, -0.27, 0.15, -0.21, -0.27, 0.16, -0.21, 0.1, -0.11, 0.02, 0.28, -0.17, 0.18, 0.28, -0.18, 0.19, -0.05, 0.0, -0.15, -0.11, -0.15, -0.33, -0.09, 0.0, -0.13, -0.15, 0.04, 0.02, -0.28, 0.17, 0.18, -0.14, 0.08, 0.0, 0.02, -0.14, 0.06, 0.0, -0.38, 0.01, 0.0, -0.38, 0.01, 0.05, 0.14, -0.04, 0.01, 0.38, 0.0, 0.08, 0.14, 0.0, -0.1, -0.04, -0.11, -0.11, -0.15, -0.33, -0.12, -0.16, -0.32, -0.1, 0.11, 0.02, -0.28, 0.17, 0.18, -0.28, 0.18, 0.19, 0.05, 0.14, 0.04, 0.01, 0.38, 0.0, 0.01, 0.38, 0.0, 0.15, -0.04, 0.02, 0.28, -0.17, 0.18, 0.14, -0.08, 0.0, -0.1, -0.04, -0.11, -0.12, -0.17, -0.32, -0.11, -0.08, -0.08, -0.1, 0.11, 0.02, -0.27, 0.18, 0.19, -0.07, 0.14, 0.05, -0.07, -0.11, -0.08, -0.12, -0.17, -0.32, -0.11, -0.18, -0.32, -0.05, 0.11, 0.09, -0.27, 0.18, 0.19, -0.27, 0.18, 0.2, 0.15, -0.04, 0.02, 0.29, -0.15, 0.19, 0.29, -0.16, 0.19, 0.05, 0.14, 0.04, 0.0, 0.38, 0.01, 0.02, 0.14, 0.08, 0.02, -0.14, 0.06, 0.01, -0.38, 0.01, 0.07, -0.14, 0.05, -0.02, 0.14, 0.06, 0.0, 0.38, 0.01, 0.0, 0.38, 0.01, -0.05, 0.11, 0.09, -0.26, 0.17, 0.21, -0.04, 0.08, 0.13, 0.13, 0.0, 0.09, 0.27, -0.15, 0.21, 0.28, -0.15, 0.2, 0.13, 0.04, 0.06, 0.34, 0.17, 0.01, 0.11, 0.08, 0.08, -0.07, -0.11, -0.08, -0.1, -0.18, -0.32, -0.02, -0.14, -0.08, -0.07, 0.04, 0.13, -0.26, 0.17, 0.21, -0.27, 0.16, 0.21, -0.05, -0.14, 0.04, 0.0, -0.38, 0.01, -0.02, -0.14, 0.08, 0.1, 0.11, 0.04, 0.34, 0.17, 0.01, 0.34, 0.18, 0.0, 0.0, -0.11, -0.11, -0.1, -0.18, -0.32, -0.09, -0.18, -0.32, -0.1, -0.11, -0.04, -0.34, -0.17, -0.01, -0.11, -0.08, -0.08, -0.07, 0.04, 0.13, -0.27, 0.15, 0.21, -0.1, 0.0, 0.13, 0.07, -0.04, 0.13, 0.26, -0.17, 0.21, 0.27, -0.16, 0.21, 0.1, 0.11, 0.04, 0.33, 0.18, 0.0, 0.09, 0.14, 0.0, -0.13, -0.04, -0.06, -0.34, -0.17, -0.01, -0.34, -0.16, -0.01, -0.13, 0.0, 0.09, -0.27, 0.15, 0.21, -0.28, 0.15, 0.2, 0.13, 0.0, 0.09, 0.29, -0.15, 0.19, 0.16, 0.0, 0.05, 0.1, 0.11, -0.04, 0.33, 0.18, 0.0, 0.34, 0.18, 0.0, 0.05, -0.11, 0.09, 0.26, -0.17, 0.21, 0.04, -0.08, 0.13, -0.13, -0.04, -0.06, -0.35, -0.15, -0.01, -0.16, 0.0, -0.05, 0.1, 0.11, -0.04, 0.34, 0.17, -0.01, 0.11, 0.08, -0.08, -0.16, 0.0, 0.0, -0.35, -0.15, -0.01, -0.35, -0.15, 0.0, -0.13, 0.0, 0.09, -0.29, 0.15, 0.19, -0.16, 0.0, 0.05, 0.07, -0.04, 0.13, 0.27, -0.15, 0.21, 0.1, 0.0, 0.13, -0.04, 0.08, 0.13, -0.05, 0.11, 0.09, -0.04, 0.08, 0.13, -0.02, 0.14, 0.06, 0.02, 0.14, 0.08, -0.02, 0.14, 0.06, 0.02, -0.14, 0.06, -0.02, -0.14, 0.08, 0.02, -0.14, 0.06, 0.02, 0.14, 0.08, 0.05, 0.14, 0.04, 0.02, 0.14, 0.08, -0.05, 0.11, 0.09, -0.07, 0.14, 0.05, -0.05, 0.11, 0.09, 0.1, -0.11, 0.02, 0.14, -0.08, 0.0, 0.1, -0.11, 0.02, -0.07, -0.11, -0.08, -0.11, -0.08, -0.08, -0.07, -0.11, -0.08, -0.07, 0.14, 0.05, -0.1, 0.11, 0.02, -0.07, 0.14, 0.05, 0.07, -0.14, 0.0, 0.07, -0.14, 0.05, 0.07, -0.14, 0.0, -0.11, -0.08, -0.08, -0.1, -0.04, -0.11, -0.11, -0.08, -0.08, 0.05, 0.14, 0.04, 0.08, 0.14, 0.0, 0.05, 0.14, 0.04, -0.1, 0.11, 0.02, -0.14, 0.08, 0.0, -0.1, 0.11, 0.02, -0.1, -0.04, -0.11, -0.09, 0.0, -0.13, -0.1, -0.04, -0.11, 0.08, 0.14, 0.0, 0.05, 0.14, -0.04, 0.08, 0.14, 0.0, -0.14, 0.08, 0.0, -0.15, 0.04, 0.02, -0.14, 0.08, 0.0, 0.07, -0.14, -0.05, 0.07, -0.14, 0.0, 0.07, -0.14, -0.05, -0.09, 0.0, -0.13, -0.05, 0.0, -0.15, -0.09, 0.0, -0.13, -0.07, 0.04, -0.13, -0.1, 0.0, -0.13, -0.07, 0.04, -0.13, 0.05, 0.14, -0.04, 0.02, 0.14, -0.08, 0.05, 0.14, -0.04, -0.1, 0.0, -0.13, -0.13, 0.0, -0.09, -0.1, 0.0, -0.13, -0.05, 0.0, -0.15, 0.0, 0.0, -0.17, -0.05, 0.0, -0.15, -0.05, -0.14, -0.04, -0.02, -0.14, -0.08, -0.05, -0.14, -0.04, 0.02, 0.14, -0.08, -0.02, 0.14, -0.06, 0.02, 0.14, -0.08, 0.0, 0.0, -0.17, 0.02, -0.04, -0.15, 0.0, 0.0, -0.17, 0.02, -0.14, -0.06, 0.07, -0.14, -0.05, 0.02, -0.14, -0.06, -0.02, 0.14, -0.06, -0.07, 0.14, -0.05, -0.02, 0.14, -0.06, -0.13, 0.0, -0.09, -0.16, 0.0, -0.05, -0.13, 0.0, -0.09, 0.02, -0.04, -0.15, 0.04, -0.08, -0.13, 0.02, -0.04, -0.15, -0.05, -0.14, 0.04, -0.08, -0.14, 0.0, -0.05, -0.14, 0.04, -0.07, 0.14, -0.05, -0.07, 0.14, 0.0, -0.07, 0.14, -0.05, -0.16, 0.0, -0.05, -0.15, 0.04, -0.02, -0.16, 0.0, -0.05, 0.04, -0.08, -0.13, 0.0, -0.11, -0.11, 0.04, -0.08, -0.13, -0.02, -0.14, -0.08, 0.02, -0.14, -0.06, -0.02, -0.14, -0.08, 0.15, -0.04, -0.02, 0.14, -0.08, 0.0, 0.15, -0.04, -0.02, -0.07, 0.14, 0.0, -0.07, 0.14, 0.05, -0.07, 0.14, 0.0, -0.15, 0.04, -0.02, -0.14, 0.08, 0.0, -0.15, 0.04, -0.02, -0.08, -0.14, 0.0, -0.05, -0.14, -0.04, -0.08, -0.14, 0.0, 0.14, -0.08, 0.0, 0.1, -0.11, -0.02, 0.14, -0.08, 0.0, -0.07, 0.14, 0.05, -0.02, 0.14, 0.06, -0.07, 0.14, 0.05, -0.14, 0.08, 0.0, -0.1, 0.11, -0.02, -0.14, 0.08, 0.0, -0.1, 0.11, -0.02, -0.07, 0.14, -0.05, -0.1, 0.11, -0.02, 0.1, -0.11, -0.02, 0.07, -0.14, -0.05, 0.1, -0.11, -0.02, -0.07, 0.14, -0.05, -0.05, 0.11, -0.09, -0.07, 0.14, -0.05, 0.07, -0.14, -0.05, 0.05, -0.11, -0.09, 0.07, -0.14, -0.05, -0.07, -0.11, 0.08, -0.02, -0.14, 0.08, -0.07, -0.11, 0.08, -0.05, 0.11, -0.09, -0.04, 0.08, -0.13, -0.05, 0.11, -0.09, 0.05, -0.11, -0.09, 0.04, -0.08, -0.13, 0.05, -0.11, -0.09, -0.02, -0.14, 0.08, 0.0, -0.11, 0.11, -0.02, -0.14, 0.08, -0.04, 0.08, -0.13, -0.07, 0.04, -0.13, -0.04, 0.08, -0.13, 0.04, -0.08, -0.13, 0.07, -0.04, -0.13, 0.04, -0.08, -0.13, 0.1, 0.04, -0.11, 0.09, 0.0, -0.13, 0.1, 0.04, -0.11, 0.09, 0.0, -0.13, 0.05, 0.0, -0.15, 0.09, 0.0, -0.13, 0.07, -0.04, -0.13, 0.1, 0.0, -0.13, 0.07, -0.04, -0.13, 0.0, -0.11, 0.11, 0.04, -0.08, 0.13, 0.0, -0.11, 0.11, 0.1, 0.0, -0.13, 0.13, 0.0, -0.09, 0.1, 0.0, -0.13, 0.04, -0.08, 0.13, 0.02, -0.04, 0.15, 0.04, -0.08, 0.13, 0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.05, 0.0, -0.15, 0.13, 0.0, -0.09, 0.16, 0.0, -0.05, 0.13, 0.0, -0.09, 0.02, -0.04, 0.15, 0.0, 0.0, 0.17, 0.02, -0.04, 0.15, 0.0, 0.0, -0.17, -0.02, 0.04, -0.15, 0.0, 0.0, -0.17, -0.01, -0.38, 0.0, -0.01, -0.38, 0.0, -0.01, -0.38, 0.0, 0.0, -0.38, -0.01, -0.01, -0.38, 0.0, 0.0, -0.38, -0.01, 0.01, -0.38, 0.0, 0.0, -0.38, -0.01, 0.01, -0.38, -0.01, 0.0, -0.38, 0.01, 0.01, -0.38, 0.0, 0.01, -0.38, 0.01, -0.01, -0.38, 0.0, 0.0, -0.38, 0.01, 0.0, -0.38, 0.01, 0.29, -0.16, 0.19, 0.28, -0.18, 0.19, 0.28, -0.17, 0.18, 0.28, -0.15, 0.2, 0.29, -0.16, 0.19, 0.29, -0.15, 0.19, 0.27, -0.16, 0.21, 0.28, -0.15, 0.2, 0.27, -0.15, 0.21, 0.27, -0.18, 0.2, 0.27, -0.16, 0.21, 0.26, -0.17, 0.21, 0.28, -0.18, 0.19, 0.27, -0.18, 0.2, 0.27, -0.18, 0.19, -0.09, -0.18, 0.32, -0.11, -0.18, 0.32, -0.1, -0.18, 0.32, -0.09, -0.16, 0.33, -0.09, -0.18, 0.32, -0.08, -0.17, 0.33, -0.1, -0.15, 0.33, -0.09, -0.16, 0.33, -0.09, -0.15, 0.33, -0.12, -0.16, 0.32, -0.1, -0.15, 0.33, -0.11, -0.15, 0.33, -0.11, -0.18, 0.32, -0.12, -0.16, 0.32, -0.12, -0.17, 0.32, -0.34, -0.18, 0.0, -0.34, -0.18, 0.0, -0.33, -0.18, 0.0, -0.34, -0.16, 0.01, -0.34, -0.18, 0.0, -0.34, -0.17, 0.01, -0.35, -0.15, 0.0, -0.34, -0.16, 0.01, -0.35, -0.15, 0.01, -0.34, -0.16, -0.01, -0.35, -0.15, 0.0, -0.35, -0.15, -0.01, -0.34, -0.18, 0.0, -0.34, -0.16, -0.01, -0.34, -0.17, -0.01, -0.11, -0.18, -0.32, -0.09, -0.18, -0.32, -0.1, -0.18, -0.32, -0.12, -0.16, -0.32, -0.11, -0.18, -0.32, -0.12, -0.17, -0.32, -0.1, -0.15, -0.33, -0.12, -0.16, -0.32, -0.11, -0.15, -0.33, -0.09, -0.16, -0.33, -0.1, -0.15, -0.33, -0.09, -0.15, -0.33, -0.09, -0.18, -0.32, -0.09, -0.16, -0.33, -0.08, -0.17, -0.33, 0.28, -0.18, -0.19, 0.29, -0.16, -0.19, 0.28, -0.17, -0.18, 0.27, -0.18, -0.2, 0.28, -0.18, -0.19, 0.27, -0.18, -0.19, 0.27, -0.16, -0.21, 0.27, -0.18, -0.2, 0.26, -0.17, -0.21, 0.28, -0.15, -0.2, 0.27, -0.16, -0.21, 0.27, -0.15, -0.21, 0.29, -0.16, -0.19, 0.28, -0.15, -0.2, 0.29, -0.15, -0.19, 0.1, 0.15, 0.33, 0.09, 0.16, 0.33, 0.09, 0.15, 0.33, 0.12, 0.16, 0.32, 0.1, 0.15, 0.33, 0.11, 0.15, 0.33, 0.11, 0.18, 0.32, 0.12, 0.16, 0.32, 0.12, 0.17, 0.32, 0.09, 0.18, 0.32, 0.11, 0.18, 0.32, 0.1, 0.18, 0.32, 0.09, 0.16, 0.33, 0.09, 0.18, 0.32, 0.08, 0.17, 0.33, -0.28, 0.15, 0.2, -0.29, 0.16, 0.19, -0.29, 0.15, 0.19, -0.27, 0.16, 0.21, -0.28, 0.15, 0.2, -0.27, 0.15, 0.21, -0.27, 0.18, 0.2, -0.27, 0.16, 0.21, -0.26, 0.17, 0.21, -0.28, 0.18, 0.19, -0.27, 0.18, 0.2, -0.27, 0.18, 0.19, -0.29, 0.16, 0.19, -0.28, 0.18, 0.19, -0.28, 0.17, 0.18, -0.28, 0.15, -0.2, -0.27, 0.16, -0.21, -0.27, 0.15, -0.21, -0.29, 0.16, -0.19, -0.28, 0.15, -0.2, -0.29, 0.15, -0.19, -0.28, 0.18, -0.19, -0.29, 0.16, -0.19, -0.28, 0.17, -0.18, -0.27, 0.18, -0.2, -0.28, 0.18, -0.19, -0.27, 0.18, -0.19, -0.27, 0.16, -0.21, -0.27, 0.18, -0.2, -0.26, 0.17, -0.21, 0.1, 0.15, -0.33, 0.12, 0.16, -0.32, 0.11, 0.15, -0.33, 0.09, 0.16, -0.33, 0.1, 0.15, -0.33, 0.09, 0.15, -0.33, 0.09, 0.18, -0.32, 0.09, 0.16, -0.33, 0.08, 0.17, -0.33, 0.11, 0.18, -0.32, 0.09, 0.18, -0.32, 0.1, 0.18, -0.32, 0.12, 0.16, -0.32, 0.11, 0.18, -0.32, 0.12, 0.17, -0.32, 0.35, 0.15, 0.0, 0.34, 0.16, 0.01, 0.35, 0.15, 0.01, 0.34, 0.16, -0.01, 0.35, 0.15, 0.0, 0.35, 0.15, -0.01, 0.34, 0.18, 0.0, 0.34, 0.16, -0.01, 0.34, 0.17, -0.01, 0.34, 0.18, 0.0, 0.34, 0.18, 0.0, 0.33, 0.18, 0.0, 0.34, 0.16, 0.01, 0.34, 0.18, 0.0, 0.34, 0.17, 0.01, 0.01, 0.38, 0.0, 0.0, 0.38, 0.01, 0.0, 0.38, 0.01, 0.01, 0.38, 0.0, 0.01, 0.38, 0.0, 0.01, 0.38, 0.0, 0.0, 0.38, -0.01, 0.01, 0.38, 0.0, 0.0, 0.38, -0.01, -0.01, 0.38, 0.0, 0.0, 0.38, -0.01, -0.01, 0.38, -0.01, 0.0, 0.38, 0.01, -0.01, 0.38, 0.0, -0.01, 0.38, 0.01, -0.1, 0.11, -0.02, -0.28, 0.17, -0.18, -0.14, 0.08, 0.0, -0.05, -0.14, 0.04, -0.01, -0.38, 0.0, -0.01, -0.38, 0.0, 0.02, -0.14, -0.06, 0.0, -0.38, -0.01, -0.02, -0.14, -0.08, -0.1, 0.11, -0.02, -0.27, 0.18, -0.19, -0.28, 0.18, -0.19, 0.1, -0.11, -0.02, 0.27, -0.18, -0.19, 0.28, -0.18, -0.19, -0.05, 0.11, -0.09, -0.27, 0.18, -0.19, -0.07, 0.14, -0.05, 0.05, -0.11, -0.09, 0.27, -0.18, -0.19, 0.07, -0.14, -0.05, -0.05, -0.14, -0.04, -0.01, -0.38, 0.0, -0.08, -0.14, 0.0, -0.07, -0.11, 0.08, -0.1, -0.18, 0.32, -0.11, -0.18, 0.32, -0.05, 0.11, -0.09, -0.26, 0.17, -0.21, -0.27, 0.18, -0.2, 0.05, -0.11, -0.09, 0.26, -0.17, -0.21, 0.27, -0.18, -0.2, 0.0, -0.11, 0.11, -0.1, -0.18, 0.32, -0.02, -0.14, 0.08, -0.07, 0.04, -0.13, -0.26, 0.17, -0.21, -0.04, 0.08, -0.13, 0.07, -0.04, -0.13, 0.26, -0.17, -0.21, 0.04, -0.08, -0.13, 0.1, 0.04, -0.11, 0.11, 0.15, -0.33, 0.12, 0.16, -0.32, 0.05, 0.0, -0.15, 0.11, 0.15, -0.33, 0.09, 0.0, -0.13, 0.07, -0.04, -0.13, 0.27, -0.15, -0.21, 0.27, -0.16, -0.21, 0.0, -0.11, 0.11, -0.08, -0.17, 0.33, -0.09, -0.18, 0.32, 0.13, 0.0, -0.09, 0.27, -0.15, -0.21, 0.1, 0.0, -0.13, 0.02, -0.04, 0.15, -0.08, -0.17, 0.33, 0.04, -0.08, 0.13, 0.05, 0.0, -0.15, 0.09, 0.15, -0.33, 0.1, 0.15, -0.33, 0.13, 0.0, -0.09, 0.29, -0.15, -0.19, 0.28, -0.15, -0.2, 0.02, -0.04, 0.15, -0.09, -0.15, 0.33, -0.09, -0.16, 0.33, -0.02, 0.04, -0.15, 0.09, 0.15, -0.33, 0.0, 0.0, -0.17, 0.15, -0.04, -0.02, 0.29, -0.15, -0.19, 0.16, 0.0, -0.05, -0.05, 0.0, 0.15, -0.09, -0.15, 0.33, 0.0, 0.0, 0.17, -0.02, 0.04, 0.15, 0.09, 0.15, 0.33, 0.09, 0.16, 0.33, -0.02, 0.04, -0.15, 0.08, 0.17, -0.33, 0.09, 0.16, -0.33, 0.05, 0.0, 0.15, 0.09, 0.15, 0.33, 0.0, 0.0, 0.17, -0.05, 0.0, 0.15, -0.11, -0.15, 0.33, -0.1, -0.15, 0.33, 0.0, 0.11, -0.11, 0.08, 0.17, -0.33, -0.04, 0.08, -0.13, -0.1, -0.04, 0.11, -0.11, -0.15, 0.33, -0.09, 0.0, 0.13, 0.0, 0.11, -0.11, 0.1, 0.18, -0.32, 0.09, 0.18, -0.32, 0.05, 0.0, 0.15, 0.11, 0.15, 0.33, 0.1, 0.15, 0.33, -0.1, -0.04, 0.11, -0.12, -0.17, 0.32, -0.12, -0.16, 0.32, 0.07, 0.11, -0.08, 0.1, 0.18, -0.32, 0.02, 0.14, -0.08, 0.1, 0.04, 0.11, 0.11, 0.15, 0.33, 0.09, 0.0, 0.13, -0.07, -0.11, 0.08, -0.12, -0.17, 0.32, -0.11, -0.08, 0.08, -0.1, -0.11, -0.04, -0.33, -0.18, 0.0, -0.34, -0.18, 0.0, 0.07, 0.11, -0.08, 0.12, 0.17, -0.32, 0.11, 0.18, -0.32, 0.1, 0.04, 0.11, 0.12, 0.17, 0.32, 0.12, 0.16, 0.32, -0.1, -0.11, 0.04, -0.33, -0.18, 0.0, -0.09, -0.14, 0.0, 0.1, 0.04, -0.11, 0.12, 0.17, -0.32, 0.11, 0.08, -0.08, 0.07, 0.11, 0.08, 0.12, 0.17, 0.32, 0.11, 0.08, 0.08, 0.13, 0.04, 0.06, 0.35, 0.15, 0.01, 0.34, 0.16, 0.01, 0.16, 0.0, 0.0, 0.35, 0.15, 0.01, 0.16, 0.0, 0.05, 0.07, 0.11, 0.08, 0.1, 0.18, 0.32, 0.11, 0.18, 0.32, -0.1, -0.11, 0.04, -0.34, -0.17, 0.01, -0.34, -0.18, 0.0, 0.0, 0.11, 0.11, 0.1, 0.18, 0.32, 0.02, 0.14, 0.08, -0.13, -0.04, 0.06, -0.34, -0.17, 0.01, -0.11, -0.08, 0.08, 0.16, 0.0, 0.0, 0.35, 0.15, -0.01, 0.35, 0.15, 0.0, 0.1, -0.11, 0.02, 0.27, -0.18, 0.19, 0.07, -0.14, 0.05, 0.0, 0.11, 0.11, 0.08, 0.17, 0.33, 0.09, 0.18, 0.32, -0.13, -0.04, 0.06, -0.35, -0.15, 0.01, -0.34, -0.16, 0.01, 0.13, 0.04, -0.06, 0.35, 0.15, -0.01, 0.16, 0.0, -0.05, 0.05, -0.11, 0.09, 0.27, -0.18, 0.19, 0.27, -0.18, 0.2, -0.02, 0.04, 0.15, 0.08, 0.17, 0.33, -0.04, 0.08, 0.13, -0.16, 0.0, 0.0, -0.35, -0.15, 0.01, -0.16, 0.0, 0.05, -0.15, 0.04, 0.02, -0.29, 0.15, 0.19, -0.29, 0.16, 0.19, 0.13, 0.04, -0.06, 0.34, 0.17, -0.01, 0.34, 0.16, -0.01, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, 0.1, -0.11, 0.02, 0.1, -0.11, 0.02, 0.07, -0.14, 0.05, 0.07, -0.14, 0.0, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, 0.07, -0.14, 0.0, 0.07, -0.14, 0.0, 0.07, -0.14, -0.05, 0.07, -0.14, -0.05, 0.1, -0.11, -0.02, 0.14, -0.08, 0.0, 0.1, -0.11, 0.02, 0.07, -0.14, 0.0, 0.07, -0.14, -0.05, 0.1, -0.11, -0.02, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, -0.05, -0.14, -0.04, -0.05, -0.14, -0.04, -0.08, -0.14, 0.0, -0.1, -0.11, -0.04, -0.08, -0.14, 0.0, -0.09, -0.14, 0.0, -0.1, -0.11, -0.04, -0.1, -0.11, -0.04, -0.11, -0.08, -0.08, -0.11, -0.08, -0.08, -0.07, -0.11, -0.08, -0.02, -0.14, -0.08, -0.05, -0.14, -0.04, -0.1, -0.11, -0.04, -0.11, -0.08, -0.08, -0.07, -0.11, -0.08, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, 0.02, -0.14, 0.06, 0.02, -0.14, 0.06, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, 0.05, -0.11, 0.09, 0.02, -0.14, 0.06, 0.05, -0.11, 0.09, 0.04, -0.08, 0.13, 0.0, -0.11, 0.11, 0.02, -0.14, 0.06, 0.05, -0.11, 0.09, 0.0, -0.11, 0.11, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, 0.0, -0.11, 0.11, 0.07, -0.14, -0.05, 0.07, -0.14, -0.05, 0.02, -0.14, -0.06, 0.02, -0.14, -0.06, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, 0.0, -0.11, -0.11, 0.02, -0.14, -0.06, 0.0, -0.11, -0.11, 0.04, -0.08, -0.13, 0.05, -0.11, -0.09, 0.02, -0.14, -0.06, 0.0, -0.11, -0.11, 0.05, -0.11, -0.09, 0.04, -0.08, -0.13, 0.04, -0.08, -0.13, 0.05, -0.11, -0.09, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, 0.05, 0.0, 0.15, 0.0, 0.0, 0.17, 0.02, -0.04, 0.15, 0.05, 0.0, 0.15, 0.02, -0.04, 0.15, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, 0.07, -0.04, 0.13, 0.02, -0.04, 0.15, 0.07, -0.04, 0.13, 0.1, 0.0, 0.13, 0.05, 0.0, 0.15, 0.02, -0.04, 0.15, 0.07, -0.04, 0.13, 0.05, 0.0, 0.15, 0.09, 0.0, 0.13, 0.1, 0.0, 0.13, 0.13, 0.0, 0.09, 0.13, 0.0, 0.09, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.13, 0.04, 0.06, 0.11, 0.08, 0.08, 0.1, 0.04, 0.11, 0.11, 0.08, 0.08, 0.11, 0.08, 0.08, 0.1, 0.04, 0.11, 0.13, 0.0, 0.09, 0.16, 0.0, 0.05, 0.13, 0.04, 0.06, 0.1, 0.04, 0.11, 0.09, 0.0, 0.13, 0.13, 0.0, 0.09, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.16, 0.0, 0.0, 0.16, 0.0, 0.05, 0.15, -0.04, 0.02, 0.16, 0.0, 0.0, 0.15, -0.04, 0.02, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, 0.15, -0.04, -0.02, 0.15, -0.04, 0.02, 0.15, -0.04, -0.02, 0.16, 0.0, -0.05, 0.16, 0.0, 0.0, 0.15, -0.04, 0.02, 0.15, -0.04, -0.02, 0.16, 0.0, 0.0, -0.1, 0.0, 0.13, -0.09, 0.0, 0.13, -0.05, 0.0, 0.15, -0.05, 0.0, 0.15, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, -0.02, 0.04, 0.15, -0.04, 0.08, 0.13, -0.07, 0.04, 0.13, -0.04, 0.08, 0.13, -0.04, 0.08, 0.13, -0.07, 0.04, 0.13, -0.05, 0.0, 0.15, 0.0, 0.0, 0.17, -0.02, 0.04, 0.15, -0.07, 0.04, 0.13, -0.1, 0.0, 0.13, -0.05, 0.0, 0.15, -0.16, 0.0, -0.05, -0.16, 0.0, -0.05, -0.16, 0.0, 0.0, -0.16, 0.0, 0.0, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, -0.15, 0.04, 0.02, -0.14, 0.08, 0.0, -0.14, 0.08, 0.0, -0.16, 0.0, 0.0, -0.16, 0.0, 0.05, -0.15, 0.04, 0.02, -0.15, 0.04, -0.02, -0.16, 0.0, -0.05, -0.16, 0.0, 0.0, -0.15, 0.04, 0.02, -0.14, 0.08, 0.0, -0.15, 0.04, -0.02, 0.0, 0.0, -0.17, 0.0, 0.0, -0.17, -0.05, 0.0, -0.15, -0.05, 0.0, -0.15, -0.09, 0.0, -0.13, -0.1, 0.0, -0.13, -0.1, 0.0, -0.13, -0.07, 0.04, -0.13, -0.05, 0.0, -0.15, -0.07, 0.04, -0.13, -0.04, 0.08, -0.13, -0.02, 0.04, -0.15, -0.05, 0.0, -0.15, -0.07, 0.04, -0.13, -0.02, 0.04, -0.15, -0.04, 0.08, -0.13, -0.04, 0.08, -0.13, -0.02, 0.04, -0.15, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, -0.13, 0.0, 0.09, -0.16, 0.0, 0.05, -0.13, -0.04, 0.06, -0.13, 0.0, 0.09, -0.13, -0.04, 0.06, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, -0.1, -0.04, 0.11, -0.13, -0.04, 0.06, -0.1, -0.04, 0.11, -0.09, 0.0, 0.13, -0.13, 0.0, 0.09, -0.13, -0.04, 0.06, -0.1, -0.04, 0.11, -0.13, 0.0, 0.09, -0.1, 0.0, -0.13, -0.09, 0.0, -0.13, -0.13, 0.0, -0.09, -0.09, 0.0, -0.13, -0.1, -0.04, -0.11, -0.13, 0.0, -0.09, -0.1, -0.04, -0.11, -0.11, -0.08, -0.08, -0.11, -0.08, -0.08, -0.13, -0.04, -0.06, -0.16, 0.0, -0.05, -0.13, 0.0, -0.09, -0.16, 0.0, -0.05, -0.16, 0.0, -0.05, -0.13, 0.0, -0.09, -0.1, -0.04, -0.11, -0.11, -0.08, -0.08, -0.13, -0.04, -0.06, 0.09, 0.0, -0.13, 0.1, 0.0, -0.13, 0.05, 0.0, -0.15, 0.1, 0.0, -0.13, 0.07, -0.04, -0.13, 0.05, 0.0, -0.15, 0.07, -0.04, -0.13, 0.04, -0.08, -0.13, 0.04, -0.08, -0.13, 0.02, -0.04, -0.15, 0.0, 0.0, -0.17, 0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.0, 0.0, -0.17, 0.05, 0.0, -0.15, 0.07, -0.04, -0.13, 0.04, -0.08, -0.13, 0.02, -0.04, -0.15, 0.16, 0.0, -0.05, 0.16, 0.0, -0.05, 0.13, 0.0, -0.09, 0.13, 0.0, -0.09, 0.1, 0.0, -0.13, 0.09, 0.0, -0.13, 0.09, 0.0, -0.13, 0.1, 0.04, -0.11, 0.13, 0.0, -0.09, 0.1, 0.04, -0.11, 0.11, 0.08, -0.08, 0.13, 0.04, -0.06, 0.13, 0.0, -0.09, 0.1, 0.04, -0.11, 0.13, 0.04, -0.06, 0.11, 0.08, -0.08, 0.11, 0.08, -0.08, 0.13, 0.04, -0.06, 0.02, 0.14, 0.08, 0.02, 0.14, 0.08, 0.05, 0.14, 0.04, 0.02, 0.14, 0.08, 0.07, 0.11, 0.08, 0.05, 0.14, 0.04, 0.07, 0.11, 0.08, 0.11, 0.08, 0.08, 0.1, 0.11, 0.04, 0.11, 0.08, 0.08, 0.11, 0.08, 0.08, 0.1, 0.11, 0.04, 0.1, 0.11, 0.04, 0.09, 0.14, 0.0, 0.08, 0.14, 0.0, 0.1, 0.11, 0.04, 0.08, 0.14, 0.0, 0.05, 0.14, 0.04, -0.07, 0.14, 0.05, -0.07, 0.14, 0.05, -0.02, 0.14, 0.06, -0.07, 0.14, 0.05, -0.05, 0.11, 0.09, -0.02, 0.14, 0.06, -0.05, 0.11, 0.09, -0.04, 0.08, 0.13, -0.04, 0.08, 0.13, 0.0, 0.11, 0.11, 0.02, 0.14, 0.08, -0.02, 0.14, 0.06, 0.02, 0.14, 0.08, 0.02, 0.14, 0.08, -0.02, 0.14, 0.06, -0.05, 0.11, 0.09, -0.04, 0.08, 0.13, 0.0, 0.11, 0.11, -0.07, 0.14, -0.05, -0.07, 0.14, -0.05, -0.07, 0.14, 0.0, -0.07, 0.14, -0.05, -0.1, 0.11, -0.02, -0.07, 0.14, 0.0, -0.1, 0.11, -0.02, -0.14, 0.08, 0.0, -0.14, 0.08, 0.0, -0.1, 0.11, 0.02, -0.07, 0.14, 0.05, -0.07, 0.14, 0.0, -0.07, 0.14, 0.05, -0.07, 0.14, 0.05, -0.07, 0.14, 0.0, -0.1, 0.11, -0.02, -0.14, 0.08, 0.0, -0.1, 0.11, 0.02, 0.02, 0.14, -0.08, 0.02, 0.14, -0.08, -0.02, 0.14, -0.06, 0.02, 0.14, -0.08, 0.0, 0.11, -0.11, -0.02, 0.14, -0.06, 0.0, 0.11, -0.11, -0.04, 0.08, -0.13, -0.04, 0.08, -0.13, -0.05, 0.11, -0.09, -0.07, 0.14, -0.05, -0.02, 0.14, -0.06, -0.07, 0.14, -0.05, -0.07, 0.14, -0.05, -0.02, 0.14, -0.06, 0.0, 0.11, -0.11, -0.04, 0.08, -0.13, -0.05, 0.11, -0.09, 0.08, 0.14, 0.0, 0.09, 0.14, 0.0, 0.1, 0.11, -0.04, 0.1, 0.11, -0.04, 0.11, 0.08, -0.08, 0.11, 0.08, -0.08, 0.07, 0.11, -0.08, 0.02, 0.14, -0.08, 0.05, 0.14, -0.04, 0.02, 0.14, -0.08, 0.02, 0.14, -0.08, 0.05, 0.14, -0.04, 0.1, 0.11, -0.04, 0.11, 0.08, -0.08, 0.07, 0.11, -0.08, 0.05, 0.14, -0.04, 0.08, 0.14, 0.0, 0.1, 0.11, -0.04, 0.11, 0.08, 0.08, 0.13, 0.04, 0.06, 0.13, 0.04, 0.06, 0.02, -0.04, 0.15, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, 0.13, 0.0, -0.09, 0.16, 0.0, -0.05, 0.16, 0.0, -0.05, 0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.0, 0.0, -0.17, 0.04, -0.08, 0.13, 0.02, -0.04, 0.15, 0.02, -0.04, 0.15, 0.1, 0.0, -0.13, 0.13, 0.0, -0.09, 0.13, 0.0, -0.09, 0.0, -0.11, 0.11, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, 0.07, -0.04, -0.13, 0.1, 0.0, -0.13, 0.1, 0.0, -0.13, 0.09, 0.0, -0.13, 0.05, 0.0, -0.15, 0.05, 0.0, -0.15, 0.1, 0.04, -0.11, 0.09, 0.0, -0.13, 0.09, 0.0, -0.13, 0.04, -0.08, -0.13, 0.07, -0.04, -0.13, 0.07, -0.04, -0.13, -0.04, 0.08, -0.13, -0.07, 0.04, -0.13, -0.07, 0.04, -0.13, -0.02, -0.14, 0.08, 0.0, -0.11, 0.11, 0.0, -0.11, 0.11, 0.05, -0.11, -0.09, 0.04, -0.08, -0.13, 0.04, -0.08, -0.13, -0.05, 0.11, -0.09, -0.04, 0.08, -0.13, -0.04, 0.08, -0.13, -0.07, -0.11, 0.08, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, 0.07, -0.14, 0.05, 0.1, -0.11, 0.02, 0.1, -0.11, 0.02, 0.07, -0.14, -0.05, 0.05, -0.11, -0.09, 0.05, -0.11, -0.09, -0.07, 0.14, -0.05, -0.05, 0.11, -0.09, -0.05, 0.11, -0.09, 0.05, -0.11, 0.09, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, 0.1, -0.11, -0.02, 0.07, -0.14, -0.05, 0.07, -0.14, -0.05, -0.1, 0.11, -0.02, -0.07, 0.14, -0.05, -0.07, 0.14, -0.05, 0.04, -0.08, 0.13, 0.05, -0.11, 0.09, 0.05, -0.11, 0.09, -0.14, 0.08, 0.0, -0.1, 0.11, -0.02, -0.1, 0.11, -0.02, 0.07, -0.04, 0.13, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, -0.07, 0.14, 0.05, -0.02, 0.14, 0.06, -0.02, 0.14, 0.06, 0.14, -0.08, 0.0, 0.1, -0.11, -0.02, 0.1, -0.11, -0.02, -0.15, 0.04, -0.02, -0.14, 0.08, 0.0, -0.14, 0.08, 0.0, -0.07, 0.14, 0.0, -0.07, 0.14, 0.05, -0.07, 0.14, 0.05, 0.15, -0.04, -0.02, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, 0.1, 0.0, 0.13, 0.07, -0.04, 0.13, 0.07, -0.04, 0.13, 0.04, -0.08, -0.13, 0.0, -0.11, -0.11, 0.0, -0.11, -0.11, -0.16, 0.0, -0.05, -0.15, 0.04, -0.02, -0.15, 0.04, -0.02, 0.13, 0.0, 0.09, 0.1, 0.0, 0.13, 0.1, 0.0, 0.13, -0.07, 0.14, -0.05, -0.07, 0.14, 0.0, -0.07, 0.14, 0.0, 0.02, -0.04, -0.15, 0.04, -0.08, -0.13, 0.04, -0.08, -0.13, -0.13, 0.0, -0.09, -0.16, 0.0, -0.05, -0.16, 0.0, -0.05, -0.02, 0.14, -0.06, -0.07, 0.14, -0.05, -0.07, 0.14, -0.05, 0.16, 0.0, 0.05, 0.13, 0.0, 0.09, 0.13, 0.0, 0.09, 0.0, 0.0, -0.17, 0.02, -0.04, -0.15, 0.02, -0.04, -0.15, 0.15, -0.04, 0.02, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.02, 0.14, -0.08, -0.02, 0.14, -0.06, -0.02, 0.14, -0.06, -0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.0, 0.0, -0.17, -0.1, 0.0, -0.13, -0.13, 0.0, -0.09, -0.13, 0.0, -0.09, 0.05, 0.14, -0.04, 0.02, 0.14, -0.08, 0.02, 0.14, -0.08, -0.07, 0.04, -0.13, -0.1, 0.0, -0.13, -0.1, 0.0, -0.13, -0.09, 0.0, -0.13, -0.05, 0.0, -0.15, -0.05, 0.0, -0.15, -0.14, 0.08, 0.0, -0.15, 0.04, 0.02, -0.15, 0.04, 0.02, 0.14, -0.08, 0.0, 0.15, -0.04, 0.02, 0.15, -0.04, 0.02, 0.08, 0.14, 0.0, 0.05, 0.14, -0.04, 0.05, 0.14, -0.04, -0.1, -0.04, -0.11, -0.09, 0.0, -0.13, -0.09, 0.0, -0.13, -0.1, 0.11, 0.02, -0.14, 0.08, 0.0, -0.14, 0.08, 0.0, 0.1, -0.11, 0.02, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, 0.05, 0.14, 0.04, 0.08, 0.14, 0.0, 0.08, 0.14, 0.0, -0.02, -0.14, 0.08, -0.05, -0.14, 0.04, -0.05, -0.14, 0.04, -0.11, -0.08, -0.08, -0.1, -0.04, -0.11, -0.1, -0.04, -0.11, -0.07, 0.14, 0.05, -0.1, 0.11, 0.02, -0.1, 0.11, 0.02, 0.02, -0.14, 0.06, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, -0.07, -0.11, -0.08, -0.11, -0.08, -0.08, -0.11, -0.08, -0.08, -0.05, 0.11, 0.09, -0.07, 0.14, 0.05, -0.07, 0.14, 0.05, 0.02, 0.14, 0.08, 0.05, 0.14, 0.04, 0.05, 0.14, 0.04, -0.09, -0.14, 0.0, -0.08, -0.14, 0.0, -0.1, -0.11, 0.04, -0.08, -0.14, 0.0, -0.05, -0.14, 0.04, -0.1, -0.11, 0.04, -0.05, -0.14, 0.04, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, -0.07, -0.11, 0.08, -0.05, -0.14, 0.04, -0.07, -0.11, 0.08, -0.11, -0.08, 0.08, -0.1, -0.11, 0.04, -0.05, -0.14, 0.04, -0.07, -0.11, 0.08, -0.1, -0.11, 0.04, -0.02, -0.14, -0.08, -0.07, -0.11, -0.08, -0.07, -0.11, -0.08, 0.14, -0.08, 0.0, 0.15, -0.04, 0.02, 0.15, -0.04, 0.02, -0.07, 0.04, 0.13, -0.04, 0.08, 0.13, -0.04, 0.08, 0.13, 0.1, 0.11, 0.04, 0.11, 0.08, 0.08, 0.11, 0.08, 0.08, 0.0, -0.11, -0.11, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, -0.11, -0.08, -0.08, -0.1, -0.11, -0.04, -0.1, -0.11, -0.04, 0.15, -0.04, 0.02, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, -0.1, 0.0, 0.13, -0.07, 0.04, 0.13, -0.07, 0.04, 0.13, 0.09, 0.14, 0.0, 0.1, 0.11, 0.04, 0.1, 0.11, 0.04, -0.13, -0.04, -0.06, -0.11, -0.08, -0.08, -0.11, -0.08, -0.08, 0.07, -0.14, 0.05, 0.02, -0.14, 0.06, 0.02, -0.14, 0.06, -0.13, 0.0, 0.09, -0.1, 0.0, 0.13, -0.1, 0.0, 0.13, 0.1, 0.11, -0.04, 0.09, 0.14, 0.0, 0.09, 0.14, 0.0, 0.13, 0.0, 0.09, 0.1, 0.0, 0.13, 0.1, 0.0, 0.13, -0.16, 0.0, -0.05, -0.13, -0.04, -0.06, -0.13, -0.04, -0.06, -0.02, -0.14, 0.08, -0.05, -0.14, 0.04, -0.05, -0.14, 0.04, 0.11, 0.08, -0.08, 0.1, 0.11, -0.04, 0.1, 0.11, -0.04, -0.16, 0.0, 0.0, -0.16, 0.0, -0.05, -0.16, 0.0, -0.05, -0.16, 0.0, 0.05, -0.13, 0.0, 0.09, -0.13, 0.0, 0.09, 0.13, 0.04, -0.06, 0.11, 0.08, -0.08, 0.11, 0.08, -0.08, 0.07, -0.04, 0.13, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, -0.15, 0.04, 0.02, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, -0.16, 0.0, 0.0, -0.16, 0.0, 0.0, 0.16, 0.0, 0.05, 0.13, 0.0, 0.09, 0.13, 0.0, 0.09, -0.04, 0.08, 0.13, -0.02, 0.04, 0.15, -0.02, 0.04, 0.15, 0.16, 0.0, -0.05, 0.13, 0.04, -0.06, 0.13, 0.04, -0.06, -0.13, -0.04, 0.06, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, 0.04, -0.08, 0.13, 0.05, -0.11, 0.09, 0.05, -0.11, 0.09, 0.0, 0.11, 0.11, -0.04, 0.08, 0.13, -0.04, 0.08, 0.13, 0.16, 0.0, 0.0, 0.16, 0.0, -0.05, 0.16, 0.0, -0.05, -0.11, -0.08, 0.08, -0.13, -0.04, 0.06, -0.13, -0.04, 0.06, 0.1, 0.0, 0.13, 0.07, -0.04, 0.13, 0.07, -0.04, 0.13, 0.02, 0.14, 0.08, 0.0, 0.11, 0.11, 0.0, 0.11, 0.11, -0.1, -0.11, 0.04, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, 0.07, 0.11, 0.08, 0.02, 0.14, 0.08, 0.02, 0.14, 0.08, 0.16, 0.0, 0.05, 0.16, 0.0, 0.0, 0.16, 0.0, 0.0, 0.05, -0.11, 0.09, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, 0.13, 0.04, 0.06, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.07, -0.14, 0.05, 0.1, -0.11, 0.02, 0.1, -0.11, 0.02, 0.11, 0.08, 0.08, 0.07, 0.11, 0.08, 0.07, 0.11, 0.08, 0.11, 0.08, -0.08, 0.1, 0.04, -0.11, 0.1, 0.04, -0.11, -0.09, -0.14, 0.0, -0.1, -0.11, 0.04, -0.1, -0.11, 0.04, 0.1, 0.04, 0.11, 0.11, 0.08, 0.08, 0.11, 0.08, 0.08, 0.07, 0.11, -0.08, 0.11, 0.08, -0.08, 0.11, 0.08, -0.08, -0.1, -0.11, -0.04, -0.09, -0.14, 0.0, -0.09, -0.14, 0.0, -0.11, -0.08, 0.08, -0.07, -0.11, 0.08, -0.07, -0.11, 0.08, 0.09, 0.0, 0.13, 0.1, 0.04, 0.11, 0.1, 0.04, 0.11, 0.02, 0.14, -0.08, 0.07, 0.11, -0.08, 0.07, 0.11, -0.08, -0.1, -0.04, 0.11, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, 0.05, 0.0, 0.15, 0.09, 0.0, 0.13, 0.09, 0.0, 0.13, 0.0, 0.11, -0.11, 0.02, 0.14, -0.08, 0.02, 0.14, -0.08, -0.09, 0.0, 0.13, -0.1, -0.04, 0.11, -0.1, -0.04, 0.11, -0.04, 0.08, -0.13, 0.0, 0.11, -0.11, 0.0, 0.11, -0.11, -0.05, 0.0, 0.15, -0.09, 0.0, 0.13, -0.09, 0.0, 0.13, 0.0, 0.0, 0.17, 0.05, 0.0, 0.15, 0.05, 0.0, 0.15, -0.02, 0.04, -0.15, -0.04, 0.08, -0.13, -0.04, 0.08, -0.13, -0.02, 0.04, 0.15, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, -0.05, 0.0, 0.15, -0.05, 0.0, 0.15, 0.16, 0.0, -0.05, 0.15, -0.04, -0.02, 0.15, -0.04, -0.02, 0.0, 0.0, -0.17, -0.02, 0.04, -0.15, -0.02, 0.04, -0.15, 0.16, 0.0, -0.05, 0.15, -0.04, -0.02, 0.15, -0.04, -0.02, 0.0, 0.0, 0.17, -0.05, 0.0, 0.15, -0.05, 0.0, 0.15, -0.02, 0.04, 0.15, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, -0.02, 0.04, -0.15, -0.04, 0.08, -0.13, -0.04, 0.08, -0.13, 0.0, 0.0, 0.17, 0.05, 0.0, 0.15, 0.05, 0.0, 0.15, -0.05, 0.0, 0.15, -0.09, 0.0, 0.13, -0.09, 0.0, 0.13, -0.04, 0.08, -0.13, 0.0, 0.11, -0.11, 0.0, 0.11, -0.11, -0.09, 0.0, 0.13, -0.1, -0.04, 0.11, -0.1, -0.04, 0.11, 0.0, 0.11, -0.11, 0.02, 0.14, -0.08, 0.02, 0.14, -0.08, 0.05, 0.0, 0.15, 0.09, 0.0, 0.13, 0.09, 0.0, 0.13, -0.1, -0.04, 0.11, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, 0.02, 0.14, -0.08, 0.07, 0.11, -0.08, 0.07, 0.11, -0.08, 0.09, 0.0, 0.13, 0.1, 0.04, 0.11, 0.1, 0.04, 0.11, -0.11, -0.08, 0.08, -0.07, -0.11, 0.08, -0.07, -0.11, 0.08, -0.1, -0.11, -0.04, -0.09, -0.14, 0.0, -0.09, -0.14, 0.0, 0.07, 0.11, -0.08, 0.11, 0.08, -0.08, 0.11, 0.08, -0.08, 0.1, 0.04, 0.11, 0.11, 0.08, 0.08, 0.11, 0.08, 0.08, -0.09, -0.14, 0.0, -0.1, -0.11, 0.04, -0.1, -0.11, 0.04, 0.11, 0.08, -0.08, 0.1, 0.04, -0.11, 0.1, 0.04, -0.11, 0.11, 0.08, 0.08, 0.07, 0.11, 0.08, 0.07, 0.11, 0.08, 0.13, 0.04, 0.06, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.16, 0.0, 0.05, 0.16, 0.0, 0.0, 0.16, 0.0, 0.0, 0.07, 0.11, 0.08, 0.02, 0.14, 0.08, 0.02, 0.14, 0.08, -0.1, -0.11, 0.04, -0.11, -0.08, 0.08, -0.11, -0.08, 0.08, 0.02, 0.14, 0.08, 0.0, 0.11, 0.11, 0.0, 0.11, 0.11, -0.11, -0.08, 0.08, -0.13, -0.04, 0.06, -0.13, -0.04, 0.06, 0.16, 0.0, 0.0, 0.16, 0.0, -0.05, 0.16, 0.0, -0.05, -0.05, -0.14, 0.04, -0.08, -0.14, 0.0, -0.08, -0.14, 0.0, 0.0, 0.11, 0.11, -0.04, 0.08, 0.13, -0.04, 0.08, 0.13, -0.13, -0.04, 0.06, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, 0.16, 0.0, -0.05, 0.13, 0.04, -0.06, 0.13, 0.04, -0.06, -0.08, -0.14, 0.0, -0.05, -0.14, -0.04, -0.05, -0.14, -0.04, -0.04, 0.08, 0.13, -0.02, 0.04, 0.15, -0.02, 0.04, 0.15, -0.16, 0.0, 0.05, -0.16, 0.0, 0.0, -0.16, 0.0, 0.0, -0.15, 0.04, 0.02, -0.16, 0.0, 0.05, -0.16, 0.0, 0.05, 0.13, 0.04, -0.06, 0.11, 0.08, -0.08, 0.11, 0.08, -0.08, -0.16, 0.0, 0.05, -0.13, 0.0, 0.09, -0.13, 0.0, 0.09, -0.16, 0.0, 0.0, -0.16, 0.0, -0.05, -0.16, 0.0, -0.05, 0.11, 0.08, -0.08, 0.1, 0.11, -0.04, 0.1, 0.11, -0.04, -0.05, -0.14, -0.04, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, -0.16, 0.0, -0.05, -0.13, -0.04, -0.06, -0.13, -0.04, -0.06, -0.02, -0.14, -0.08, 0.02, -0.14, -0.06, 0.02, -0.14, -0.06, 0.1, 0.11, -0.04, 0.09, 0.14, 0.0, 0.09, 0.14, 0.0, -0.13, 0.0, 0.09, -0.1, 0.0, 0.13, -0.1, 0.0, 0.13, -0.13, -0.04, -0.06, -0.11, -0.08, -0.08, -0.11, -0.08, -0.08, 0.09, 0.14, 0.0, 0.1, 0.11, 0.04, 0.1, 0.11, 0.04, 0.02, -0.14, -0.06, 0.07, -0.14, -0.05, 0.07, -0.14, -0.05, -0.1, 0.0, 0.13, -0.07, 0.04, 0.13, -0.07, 0.04, 0.13, -0.11, -0.08, -0.08, -0.1, -0.11, -0.04, -0.1, -0.11, -0.04, 0.07, -0.14, -0.05, 0.07, -0.14, 0.0, 0.07, -0.14, 0.0, 0.0, -0.11, -0.11, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, 0.1, 0.11, 0.04, 0.11, 0.08, 0.08, 0.11, 0.08, 0.08, -0.07, 0.04, 0.13, -0.04, 0.08, 0.13, -0.04, 0.08, 0.13, -0.02, -0.14, -0.08, -0.07, -0.11, -0.08, -0.07, -0.11, -0.08, 0.11, 0.08, 0.08, 0.13, 0.04, 0.06, 0.13, 0.04, 0.06, 0.07, -0.14, 0.0, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, -0.04, 0.08, 0.13, -0.05, 0.11, 0.09, -0.05, 0.11, 0.09, -0.02, 0.14, 0.06, 0.02, 0.14, 0.08, 0.02, 0.14, 0.08, 0.07, -0.14, 0.05, 0.02, -0.14, 0.06, 0.02, -0.14, 0.06, 0.02, -0.14, -0.06, 0.07, -0.14, -0.05, 0.01, -0.38, -0.01, -0.02, 0.14, 0.06, 0.0, 0.38, 0.01, -0.01, 0.38, 0.01, 0.1, -0.11, -0.02, 0.28, -0.18, -0.19, 0.28, -0.17, -0.18, -0.15, 0.04, -0.02, -0.14, 0.08, 0.0, -0.28, 0.17, -0.18, -0.07, 0.14, 0.0, -0.07, 0.14, 0.05, -0.01, 0.38, 0.01, 0.15, -0.04, -0.02, 0.14, -0.08, 0.0, 0.28, -0.17, -0.18, -0.05, -0.14, -0.04, -0.02, -0.14, -0.08, 0.0, -0.38, -0.01, 0.0, -0.11, -0.11, -0.09, -0.18, -0.32, -0.08, -0.17, -0.33, -0.15, 0.04, -0.02, -0.29, 0.16, -0.19, -0.29, 0.15, -0.19, -0.07, 0.14, 0.0, -0.01, 0.38, 0.0, -0.01, 0.38, -0.01, 0.02, -0.04, -0.15, 0.04, -0.08, -0.13, -0.08, -0.17, -0.33, -0.13, 0.0, -0.09, -0.16, 0.0, -0.05, -0.29, 0.15, -0.19, 0.07, -0.14, 0.0, 0.01, -0.38, 0.0, 0.01, -0.38, -0.01, -0.02, 0.14, -0.06, -0.07, 0.14, -0.05, -0.01, 0.38, -0.01, 0.02, -0.04, -0.15, -0.09, -0.16, -0.33, -0.09, -0.15, -0.33, -0.02, 0.14, -0.06, 0.0, 0.38, -0.01, 0.0, 0.38, -0.01, -0.05, 0.0, -0.15, 0.0, 0.0, -0.17, -0.09, -0.15, -0.33, -0.13, 0.0, -0.09, -0.28, 0.15, -0.2, -0.27, 0.15, -0.21, 0.07, -0.14, 0.0, 0.07, -0.14, 0.05, 0.01, -0.38, 0.01, 0.05, 0.14, -0.04, 0.02, 0.14, -0.08, 0.0, 0.38, -0.01, -0.07, 0.04, -0.13, -0.1, 0.0, -0.13, -0.27, 0.15, -0.21, 0.1, -0.11, 0.02, 0.14, -0.08, 0.0, 0.28, -0.17, 0.18, -0.05, 0.0, -0.15, -0.1, -0.15, -0.33, -0.11, -0.15, -0.33, -0.15, 0.04, 0.02, -0.29, 0.16, 0.19, -0.28, 0.17, 0.18, 0.02, -0.14, 0.06, -0.02, -0.14, 0.08, 0.0, -0.38, 0.01, 0.05, 0.14, -0.04, 0.01, 0.38, 0.0, 0.01, 0.38, 0.0, -0.1, -0.04, -0.11, -0.09, 0.0, -0.13, -0.11, -0.15, -0.33, -0.1, 0.11, 0.02, -0.14, 0.08, 0.0, -0.28, 0.17, 0.18, 0.05, 0.14, 0.04, 0.08, 0.14, 0.0, 0.01, 0.38, 0.0, 0.15, -0.04, 0.02, 0.29, -0.16, 0.19, 0.28, -0.17, 0.18, -0.1, -0.04, -0.11, -0.12, -0.16, -0.32, -0.12, -0.17, -0.32, -0.1, 0.11, 0.02, -0.28, 0.18, 0.19, -0.27, 0.18, 0.19, -0.07, -0.11, -0.08, -0.11, -0.08, -0.08, -0.12, -0.17, -0.32, -0.05, 0.11, 0.09, -0.07, 0.14, 0.05, -0.27, 0.18, 0.19, 0.15, -0.04, 0.02, 0.16, 0.0, 0.05, 0.29, -0.15, 0.19, 0.05, 0.14, 0.04, 0.01, 0.38, 0.0, 0.0, 0.38, 0.01, 0.02, -0.14, 0.06, 0.0, -0.38, 0.01, 0.01, -0.38, 0.01, -0.02, 0.14, 0.06, 0.02, 0.14, 0.08, 0.0, 0.38, 0.01, -0.05, 0.11, 0.09, -0.27, 0.18, 0.2, -0.26, 0.17, 0.21, 0.13, 0.0, 0.09, 0.1, 0.0, 0.13, 0.27, -0.15, 0.21, 0.13, 0.04, 0.06, 0.34, 0.16, 0.01, 0.34, 0.17, 0.01, -0.07, -0.11, -0.08, -0.11, -0.18, -0.32, -0.1, -0.18, -0.32, -0.07, 0.04, 0.13, -0.04, 0.08, 0.13, -0.26, 0.17, 0.21, -0.05, -0.14, 0.04, -0.01, -0.38, 0.0, 0.0, -0.38, 0.01, 0.1, 0.11, 0.04, 0.11, 0.08, 0.08, 0.34, 0.17, 0.01, 0.0, -0.11, -0.11, -0.02, -0.14, -0.08, -0.1, -0.18, -0.32, -0.1, -0.11, -0.04, -0.34, -0.18, 0.0, -0.34, -0.17, -0.01, -0.07, 0.04, 0.13, -0.27, 0.16, 0.21, -0.27, 0.15, 0.21, 0.07, -0.04, 0.13, 0.04, -0.08, 0.13, 0.26, -0.17, 0.21, 0.1, 0.11, 0.04, 0.34, 0.18, 0.0, 0.33, 0.18, 0.0, -0.13, -0.04, -0.06, -0.11, -0.08, -0.08, -0.34, -0.17, -0.01, -0.13, 0.0, 0.09, -0.1, 0.0, 0.13, -0.27, 0.15, 0.21, 0.13, 0.0, 0.09, 0.28, -0.15, 0.2, 0.29, -0.15, 0.19, 0.1, 0.11, -0.04, 0.09, 0.14, 0.0, 0.33, 0.18, 0.0, 0.05, -0.11, 0.09, 0.27, -0.18, 0.2, 0.26, -0.17, 0.21, -0.13, -0.04, -0.06, -0.34, -0.16, -0.01, -0.35, -0.15, -0.01, 0.1, 0.11, -0.04, 0.34, 0.18, 0.0, 0.34, 0.17, -0.01, -0.16, 0.0, 0.0, -0.16, 0.0, -0.05, -0.35, -0.15, -0.01, -0.13, 0.0, 0.09, -0.28, 0.15, 0.2, -0.29, 0.15, 0.19, 0.07, -0.04, 0.13, 0.27, -0.16, 0.21, 0.27, -0.15, 0.21, -0.04, 0.08, 0.13, -0.05, 0.11, 0.09, -0.05, 0.11, 0.09, -0.02, 0.14, 0.06, 0.02, 0.14, 0.08, 0.02, 0.14, 0.08, 0.02, -0.14, 0.06, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, 0.02, 0.14, 0.08, 0.05, 0.14, 0.04, 0.05, 0.14, 0.04, -0.05, 0.11, 0.09, -0.07, 0.14, 0.05, -0.07, 0.14, 0.05, 0.1, -0.11, 0.02, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, -0.07, -0.11, -0.08, -0.11, -0.08, -0.08, -0.11, -0.08, -0.08, -0.07, 0.14, 0.05, -0.1, 0.11, 0.02, -0.1, 0.11, 0.02, 0.07, -0.14, 0.0, 0.07, -0.14, 0.05, 0.07, -0.14, 0.05, -0.11, -0.08, -0.08, -0.1, -0.04, -0.11, -0.1, -0.04, -0.11, 0.05, 0.14, 0.04, 0.08, 0.14, 0.0, 0.08, 0.14, 0.0, -0.1, 0.11, 0.02, -0.14, 0.08, 0.0, -0.14, 0.08, 0.0, -0.1, -0.04, -0.11, -0.09, 0.0, -0.13, -0.09, 0.0, -0.13, 0.08, 0.14, 0.0, 0.05, 0.14, -0.04, 0.05, 0.14, -0.04, -0.14, 0.08, 0.0, -0.15, 0.04, 0.02, -0.15, 0.04, 0.02, 0.07, -0.14, -0.05, 0.07, -0.14, 0.0, 0.07, -0.14, 0.0, -0.09, 0.0, -0.13, -0.05, 0.0, -0.15, -0.05, 0.0, -0.15, -0.07, 0.04, -0.13, -0.1, 0.0, -0.13, -0.1, 0.0, -0.13, 0.05, 0.14, -0.04, 0.02, 0.14, -0.08, 0.02, 0.14, -0.08, -0.1, 0.0, -0.13, -0.13, 0.0, -0.09, -0.13, 0.0, -0.09, -0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.0, 0.0, -0.17, -0.05, -0.14, -0.04, -0.02, -0.14, -0.08, -0.02, -0.14, -0.08, 0.02, 0.14, -0.08, -0.02, 0.14, -0.06, -0.02, 0.14, -0.06, 0.0, 0.0, -0.17, 0.02, -0.04, -0.15, 0.02, -0.04, -0.15, 0.02, -0.14, -0.06, 0.07, -0.14, -0.05, 0.07, -0.14, -0.05, -0.02, 0.14, -0.06, -0.07, 0.14, -0.05, -0.07, 0.14, -0.05, -0.13, 0.0, -0.09, -0.16, 0.0, -0.05, -0.16, 0.0, -0.05, 0.02, -0.04, -0.15, 0.04, -0.08, -0.13, 0.04, -0.08, -0.13, -0.05, -0.14, 0.04, -0.08, -0.14, 0.0, -0.08, -0.14, 0.0, -0.07, 0.14, -0.05, -0.07, 0.14, 0.0, -0.07, 0.14, 0.0, -0.16, 0.0, -0.05, -0.15, 0.04, -0.02, -0.15, 0.04, -0.02, 0.04, -0.08, -0.13, 0.0, -0.11, -0.11, 0.0, -0.11, -0.11, -0.02, -0.14, -0.08, 0.02, -0.14, -0.06, 0.02, -0.14, -0.06, 0.15, -0.04, -0.02, 0.14, -0.08, 0.0, 0.14, -0.08, 0.0, -0.07, 0.14, 0.0, -0.07, 0.14, 0.05, -0.07, 0.14, 0.05, -0.15, 0.04, -0.02, -0.14, 0.08, 0.0, -0.14, 0.08, 0.0, -0.08, -0.14, 0.0, -0.05, -0.14, -0.04, -0.05, -0.14, -0.04, 0.14, -0.08, 0.0, 0.1, -0.11, -0.02, 0.1, -0.11, -0.02, -0.07, 0.14, 0.05, -0.02, 0.14, 0.06, -0.02, 0.14, 0.06, -0.14, 0.08, 0.0, -0.1, 0.11, -0.02, -0.1, 0.11, -0.02, -0.1, 0.11, -0.02, -0.07, 0.14, -0.05, -0.07, 0.14, -0.05, 0.1, -0.11, -0.02, 0.07, -0.14, -0.05, 0.07, -0.14, -0.05, -0.07, 0.14, -0.05, -0.05, 0.11, -0.09, -0.05, 0.11, -0.09, 0.07, -0.14, -0.05, 0.05, -0.11, -0.09, 0.05, -0.11, -0.09, -0.07, -0.11, 0.08, -0.02, -0.14, 0.08, -0.02, -0.14, 0.08, -0.05, 0.11, -0.09, -0.04, 0.08, -0.13, -0.04, 0.08, -0.13, 0.05, -0.11, -0.09, 0.04, -0.08, -0.13, 0.04, -0.08, -0.13, -0.02, -0.14, 0.08, 0.0, -0.11, 0.11, 0.0, -0.11, 0.11, -0.04, 0.08, -0.13, -0.07, 0.04, -0.13, -0.07, 0.04, -0.13, 0.04, -0.08, -0.13, 0.07, -0.04, -0.13, 0.07, -0.04, -0.13, 0.1, 0.04, -0.11, 0.09, 0.0, -0.13, 0.09, 0.0, -0.13, 0.09, 0.0, -0.13, 0.05, 0.0, -0.15, 0.05, 0.0, -0.15, 0.07, -0.04, -0.13, 0.1, 0.0, -0.13, 0.1, 0.0, -0.13, 0.0, -0.11, 0.11, 0.04, -0.08, 0.13, 0.04, -0.08, 0.13, 0.1, 0.0, -0.13, 0.13, 0.0, -0.09, 0.13, 0.0, -0.09, 0.04, -0.08, 0.13, 0.02, -0.04, 0.15, 0.02, -0.04, 0.15, 0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.0, 0.0, -0.17, 0.13, 0.0, -0.09, 0.16, 0.0, -0.05, 0.16, 0.0, -0.05, 0.02, -0.04, 0.15, 0.0, 0.0, 0.17, 0.0, 0.0, 0.17, 0.0, 0.0, -0.17, -0.02, 0.04, -0.15, -0.02, 0.04, -0.15, -0.01, -0.38, 0.0, 0.0, -0.39, 0.0, -0.01, -0.38, 0.0, 0.0, -0.38, -0.01, 0.0, -0.39, 0.0, -0.01, -0.38, 0.0, 0.01, -0.38, 0.0, 0.0, -0.39, 0.0, 0.0, -0.38, -0.01, 0.0, -0.38, 0.01, 0.0, -0.39, 0.0, 0.01, -0.38, 0.0, -0.01, -0.38, 0.0, 0.0, -0.39, 0.0, 0.0, -0.38, 0.01, 0.29, -0.16, 0.19, 0.28, -0.17, 0.2, 0.28, -0.18, 0.19, 0.28, -0.15, 0.2, 0.28, -0.17, 0.2, 0.29, -0.16, 0.19, 0.27, -0.16, 0.21, 0.28, -0.17, 0.2, 0.28, -0.15, 0.2, 0.27, -0.18, 0.2, 0.28, -0.17, 0.2, 0.27, -0.16, 0.21, 0.28, -0.18, 0.19, 0.28, -0.17, 0.2, 0.27, -0.18, 0.2, -0.09, -0.18, 0.32, -0.1, -0.17, 0.33, -0.11, -0.18, 0.32, -0.09, -0.16, 0.33, -0.1, -0.17, 0.33, -0.09, -0.18, 0.32, -0.1, -0.15, 0.33, -0.1, -0.17, 0.33, -0.09, -0.16, 0.33, -0.12, -0.16, 0.32, -0.1, -0.17, 0.33, -0.1, -0.15, 0.33, -0.11, -0.18, 0.32, -0.1, -0.17, 0.33, -0.12, -0.16, 0.32, -0.34, -0.18, 0.0, -0.35, -0.17, 0.0, -0.34, -0.18, 0.0, -0.34, -0.16, 0.01, -0.35, -0.17, 0.0, -0.34, -0.18, 0.0, -0.35, -0.15, 0.0, -0.35, -0.17, 0.0, -0.34, -0.16, 0.01, -0.34, -0.16, -0.01, -0.35, -0.17, 0.0, -0.35, -0.15, 0.0, -0.34, -0.18, 0.0, -0.35, -0.17, 0.0, -0.34, -0.16, -0.01, -0.11, -0.18, -0.32, -0.1, -0.17, -0.33, -0.09, -0.18, -0.32, -0.12, -0.16, -0.32, -0.1, -0.17, -0.33, -0.11, -0.18, -0.32, -0.1, -0.15, -0.33, -0.1, -0.17, -0.33, -0.12, -0.16, -0.32, -0.09, -0.16, -0.33, -0.1, -0.17, -0.33, -0.1, -0.15, -0.33, -0.09, -0.18, -0.32, -0.1, -0.17, -0.33, -0.09, -0.16, -0.33, 0.28, -0.18, -0.19, 0.28, -0.17, -0.2, 0.29, -0.16, -0.19, 0.27, -0.18, -0.2, 0.28, -0.17, -0.2, 0.28, -0.18, -0.19, 0.27, -0.16, -0.21, 0.28, -0.17, -0.2, 0.27, -0.18, -0.2, 0.28, -0.15, -0.2, 0.28, -0.17, -0.2, 0.27, -0.16, -0.21, 0.29, -0.16, -0.19, 0.28, -0.17, -0.2, 0.28, -0.15, -0.2, 0.1, 0.15, 0.33, 0.1, 0.17, 0.33, 0.09, 0.16, 0.33, 0.12, 0.16, 0.32, 0.1, 0.17, 0.33, 0.1, 0.15, 0.33, 0.11, 0.18, 0.32, 0.1, 0.17, 0.33, 0.12, 0.16, 0.32, 0.09, 0.18, 0.32, 0.1, 0.17, 0.33, 0.11, 0.18, 0.32, 0.09, 0.16, 0.33, 0.1, 0.17, 0.33, 0.09, 0.18, 0.32, -0.28, 0.15, 0.2, -0.28, 0.17, 0.2, -0.29, 0.16, 0.19, -0.27, 0.16, 0.21, -0.28, 0.17, 0.2, -0.28, 0.15, 0.2, -0.27, 0.18, 0.2, -0.28, 0.17, 0.2, -0.27, 0.16, 0.21, -0.28, 0.18, 0.19, -0.28, 0.17, 0.2, -0.27, 0.18, 0.2, -0.29, 0.16, 0.19, -0.28, 0.17, 0.2, -0.28, 0.18, 0.19, -0.28, 0.15, -0.2, -0.28, 0.17, -0.2, -0.27, 0.16, -0.21, -0.29, 0.16, -0.19, -0.28, 0.17, -0.2, -0.28, 0.15, -0.2, -0.28, 0.18, -0.19, -0.28, 0.17, -0.2, -0.29, 0.16, -0.19, -0.27, 0.18, -0.2, -0.28, 0.17, -0.2, -0.28, 0.18, -0.19, -0.27, 0.16, -0.21, -0.28, 0.17, -0.2, -0.27, 0.18, -0.2, 0.1, 0.15, -0.33, 0.1, 0.17, -0.33, 0.12, 0.16, -0.32, 0.09, 0.16, -0.33, 0.1, 0.17, -0.33, 0.1, 0.15, -0.33, 0.09, 0.18, -0.32, 0.1, 0.17, -0.33, 0.09, 0.16, -0.33, 0.11, 0.18, -0.32, 0.1, 0.17, -0.33, 0.09, 0.18, -0.32, 0.12, 0.16, -0.32, 0.1, 0.17, -0.33, 0.11, 0.18, -0.32, 0.35, 0.15, 0.0, 0.35, 0.17, 0.0, 0.34, 0.16, 0.01, 0.34, 0.16, -0.01, 0.35, 0.17, 0.0, 0.35, 0.15, 0.0, 0.34, 0.18, 0.0, 0.35, 0.17, 0.0, 0.34, 0.16, -0.01, 0.34, 0.18, 0.0, 0.35, 0.17, 0.0, 0.34, 0.18, 0.0, 0.34, 0.16, 0.01, 0.35, 0.17, 0.0, 0.34, 0.18, 0.0, 0.01, 0.38, 0.0, 0.0, 0.39, 0.0, 0.0, 0.38, 0.01, 0.01, 0.38, 0.0, 0.0, 0.39, 0.0, 0.01, 0.38, 0.0, 0.0, 0.38, -0.01, 0.0, 0.39, 0.0, 0.01, 0.38, 0.0, -0.01, 0.38, 0.0, 0.0, 0.39, 0.0, 0.0, 0.38, -0.01, 0.0, 0.38, 0.01, 0.0, 0.39, 0.0, -0.01, 0.38, 0.0, -0.1, 0.11, -0.02, -0.28, 0.18, -0.19, -0.28, 0.17, -0.18, -0.05, -0.14, 0.04, -0.08, -0.14, 0.0, -0.01, -0.38, 0.0, 0.02, -0.14, -0.06, 0.0, -0.38, -0.01, 0.0, -0.38, -0.01, -0.1, 0.11, -0.02, -0.07, 0.14, -0.05, -0.27, 0.18, -0.19, 0.1, -0.11, -0.02, 0.07, -0.14, -0.05, 0.27, -0.18, -0.19, -0.05, 0.11, -0.09, -0.27, 0.18, -0.2, -0.27, 0.18, -0.19, 0.05, -0.11, -0.09, 0.27, -0.18, -0.2, 0.27, -0.18, -0.19, -0.05, -0.14, -0.04, -0.01, -0.38, 0.0, -0.01, -0.38, 0.0, -0.07, -0.11, 0.08, -0.02, -0.14, 0.08, -0.1, -0.18, 0.32, -0.05, 0.11, -0.09, -0.04, 0.08, -0.13, -0.26, 0.17, -0.21, 0.05, -0.11, -0.09, 0.04, -0.08, -0.13, 0.26, -0.17, -0.21, 0.0, -0.11, 0.11, -0.09, -0.18, 0.32, -0.1, -0.18, 0.32, -0.07, 0.04, -0.13, -0.27, 0.16, -0.21, -0.26, 0.17, -0.21, 0.07, -0.04, -0.13, 0.27, -0.16, -0.21, 0.26, -0.17, -0.21, 0.1, 0.04, -0.11, 0.09, 0.0, -0.13, 0.11, 0.15, -0.33, 0.05, 0.0, -0.15, 0.1, 0.15, -0.33, 0.11, 0.15, -0.33, 0.07, -0.04, -0.13, 0.1, 0.0, -0.13, 0.27, -0.15, -0.21, 0.0, -0.11, 0.11, 0.04, -0.08, 0.13, -0.08, -0.17, 0.33, 0.13, 0.0, -0.09, 0.28, -0.15, -0.2, 0.27, -0.15, -0.21, 0.02, -0.04, 0.15, -0.09, -0.16, 0.33, -0.08, -0.17, 0.33, 0.05, 0.0, -0.15, 0.0, 0.0, -0.17, 0.09, 0.15, -0.33, 0.13, 0.0, -0.09, 0.16, 0.0, -0.05, 0.29, -0.15, -0.19, 0.02, -0.04, 0.15, 0.0, 0.0, 0.17, -0.09, -0.15, 0.33, -0.02, 0.04, -0.15, 0.09, 0.16, -0.33, 0.09, 0.15, -0.33, 0.15, -0.04, -0.02, 0.29, -0.16, -0.19, 0.29, -0.15, -0.19, -0.05, 0.0, 0.15, -0.1, -0.15, 0.33, -0.09, -0.15, 0.33, -0.02, 0.04, 0.15, 0.0, 0.0, 0.17, 0.09, 0.15, 0.33, -0.02, 0.04, -0.15, -0.04, 0.08, -0.13, 0.08, 0.17, -0.33, 0.05, 0.0, 0.15, 0.1, 0.15, 0.33, 0.09, 0.15, 0.33, -0.05, 0.0, 0.15, -0.09, 0.0, 0.13, -0.11, -0.15, 0.33, 0.0, 0.11, -0.11, 0.09, 0.18, -0.32, 0.08, 0.17, -0.33, -0.1, -0.04, 0.11, -0.12, -0.16, 0.32, -0.11, -0.15, 0.33, 0.0, 0.11, -0.11, 0.02, 0.14, -0.08, 0.1, 0.18, -0.32, 0.05, 0.0, 0.15, 0.09, 0.0, 0.13, 0.11, 0.15, 0.33, -0.1, -0.04, 0.11, -0.11, -0.08, 0.08, -0.12, -0.17, 0.32, 0.07, 0.11, -0.08, 0.11, 0.18, -0.32, 0.1, 0.18, -0.32, 0.1, 0.04, 0.11, 0.12, 0.16, 0.32, 0.11, 0.15, 0.33, -0.07, -0.11, 0.08, -0.11, -0.18, 0.32, -0.12, -0.17, 0.32, -0.1, -0.11, -0.04, -0.09, -0.14, 0.0, -0.33, -0.18, 0.0, 0.07, 0.11, -0.08, 0.11, 0.08, -0.08, 0.12, 0.17, -0.32, 0.1, 0.04, 0.11, 0.11, 0.08, 0.08, 0.12, 0.17, 0.32, -0.1, -0.11, 0.04, -0.34, -0.18, 0.0, -0.33, -0.18, 0.0, 0.1, 0.04, -0.11, 0.12, 0.16, -0.32, 0.12, 0.17, -0.32, 0.07, 0.11, 0.08, 0.11, 0.18, 0.32, 0.12, 0.17, 0.32, 0.13, 0.04, 0.06, 0.16, 0.0, 0.05, 0.35, 0.15, 0.01, 0.16, 0.0, 0.0, 0.35, 0.15, 0.0, 0.35, 0.15, 0.01, 0.07, 0.11, 0.08, 0.02, 0.14, 0.08, 0.1, 0.18, 0.32, -0.1, -0.11, 0.04, -0.11, -0.08, 0.08, -0.34, -0.17, 0.01, 0.0, 0.11, 0.11, 0.09, 0.18, 0.32, 0.1, 0.18, 0.32, -0.13, -0.04, 0.06, -0.34, -0.16, 0.01, -0.34, -0.17, 0.01, 0.16, 0.0, 0.0, 0.16, 0.0, -0.05, 0.35, 0.15, -0.01, 0.1, -0.11, 0.02, 0.28, -0.18, 0.19, 0.27, -0.18, 0.19, 0.0, 0.11, 0.11, -0.04, 0.08, 0.13, 0.08, 0.17, 0.33, -0.13, -0.04, 0.06, -0.16, 0.0, 0.05, -0.35, -0.15, 0.01, 0.13, 0.04, -0.06, 0.34, 0.16, -0.01, 0.35, 0.15, -0.01, 0.05, -0.11, 0.09, 0.07, -0.14, 0.05, 0.27, -0.18, 0.19, -0.02, 0.04, 0.15, 0.09, 0.16, 0.33, 0.08, 0.17, 0.33, -0.16, 0.0, 0.0, -0.35, -0.15, 0.0, -0.35, -0.15, 0.01, -0.15, 0.04, 0.02, -0.16, 0.0, 0.05, -0.29, 0.15, 0.19, 0.13, 0.04, -0.06, 0.11, 0.08, -0.08, 0.34, 0.17, -0.01];
                var fullposition = refmesh.map(function (v,i) {return position[i % 3] + v;});
                var fullcolor = refmesh.map(function (v,i) {return i % 3 ? 0 : 1;}); //return color[i % 3]
                var shape = new NGL.Shape("clash");
                var meshBuffer = new NGL.MeshBuffer({
                    position: new Float32Array(fullposition),
                    color: new Float32Array(fullcolor)
                });
                shape.addBuffer(meshBuffer);
                var shapeComp = protein.stage.addComponentFromObject(shape);
                shapeComp.addRepresentation("buffer");
                if (! myData.spinningTimer) {myData.spinningTimer = [];}
                myData.spinningTimer.push(setInterval(function () {
                    shapeComp.controls.spin([1, 0, 0], 30)
                    }, 100));
                //spikyball made and added.
            } //end if
        }); //end neigh atom
    }); //end this atom
};

NGL.specialOps.showSurface = function (id,selection, view) {
    if (NGL.debug) {console.log('Show surface '+selection)}
    // Prepare
    NGL.specialOps.postInitialise(); //worst case schenario prevention.
    selection = selection || "polymer";
    var color = 'electrostatic'; //not changeable for now.
    var protein = NGL.getStage(id).getComponentByType('structure');
    protein.addRepresentation("surface", { sele: selection, colorScheme: color, colorDomain: [ -0.3, 0.3 ], surfaceType: "av"});
    if (!! view) {NGL.specialOps.slowOrient(id, view);}
        else {
        protein.autoView(2000);
        protein.autoView(selection, 2000);
        }
};

NGL.specialOps.showBlur = function (id,selection, color, radius, view) {
    if (NGL.debug) {console.log('Show surface '+selection)}
    // Prepare
    NGL.specialOps.postInitialise(); //worst case schenario prevention.
    var protein = NGL.getStage(id).getComponentByType('structure');
    NGL.getStage(id).removeClashes();
    protein.removeAllRepresentations();
  protein.addRepresentation("tube", {
    sele: "polymer",
    radiusType: "bfactor",
    radiusScale: 0.010,
    color: "bfactor",
    colorScale: "RdYlBu"
  });
  if (selection) {
      NGL.specialOps.showResidue(id,selection,color,radius,view);
  }
  else if (!! view) {NGL.specialOps.slowOrient(id, view);}
        else {
        protein.autoView(2000);
        }
};

NGL.specialOps.hardReset = function () {  //when the page is faux-refreshed.
    Object.entries(NGL.stageIds).forEach(([k,v]) => $('#'+k).children().detach());
    window.myData = undefined;
    NGL.stageIds = {};
    window.stage = undefined;
    console.log('HARD RESET.');
};

NGL.specialOps.removeImg = function () {
    var img = '#'+myData.id+' img';
    if (!! $(img).length) { //there is an image. Remove and get the sizes
		var w=$(img).width();
		var h=$(img).height();
		$(img).detach();
		$('#'+myData.id).css('width',w).css('height',h);
    }
};

NGL.specialOps._run_loadFx = function (protein, fx) {
    if (typeof fx === 'function') {
        fx(protein)}
    else if (typeof fx === 'string') {
        var fxname = fx.replace(/\W/g,'');
       if (window[fxname] !== undefined) {window[fxname](protein)}
       else {setTimeout((protein, fxname) => NGL.specialOps._run_loadFx(protein, fxname),300)} //ansync issue.
       } //prevent XSS
    else {
        protein.addRepresentation("cartoon", {smoothSheet: true}); protein.autoView();
    }
    return protein;
};

NGL.specialOps.load = function (option) {
    // super extreme case. No multiLoad has been called to initialise the scene. This a last ditch attempt.
    NGL.specialOps.postInitialise();
    // determine what option is.
    var index;
    if (typeof option === "undefined") {index = myData.currentIndex;} //use is lazy.
    else if (typeof option === "number") {index = option;} //user gave index.
    else if (typeof option === 'object') { //user gave a protein object
        myData.proteins.push(object);
        index = myData.proteins.length - 1;
    }
    else if ((typeof option === "string") && (option.length) >= 4) { // user gave pdb code.
        myData.proteins.push({type: 'rcsb', value: option.slice(0,4)}); //no chains please.
        index = myData.proteins.length - 1;
    }
    else if (parseInt(option) !== NaN < myData.proteins.length) { //user gave a number as a string.
        index = parseInt(option);
    }
    else {throw 'No idea what this use submitted option is.'}
    // check if the one asked for is loaded.
    if ( (index === myData.currentIndex)) {
        var protein = NGL.stageIds[myData.id].getComponentByType('structure');
        //if (typeof myData.proteins[index].loadFx === 'function') {myData.proteins[index].loadFx(protein)};
        return new Promise(function(resolve, reject) {resolve(protein);});
    }
    else {myData.currentIndex = index; myData.currentChain = myData.proteins[index].chain}
    // deal with image.
    if ($('#'+myData.id+' img')) { NGL.specialOps.removeImg();}
    // toggle structure
    // - check if there is a stage.
    if (! NGL.getStage(myData.id)) {
        NGL.stageIds[myData.id] = new NGL.Stage( "viewport",{backgroundColor: myData.backgroundColor});
        window.addEventListener( "resize", function( event ){NGL.stageIds[myData.id].handleResize();}, false );
    } else { //tabula rasa!
        NGL.stageIds[myData.id].removeAllComponents();
    }
    //new model. Force reset
    if (myData.proteins[index].type === 'file') {
        return NGL.stageIds[myData.id].loadFile(myData.proteins[index].value).then(function (protein) {
            NGL.specialOps._run_loadFx(protein, myData.proteins[index].loadFx);});

    }
    else if (myData.proteins[index].type === 'data') {
        var ext = myData.proteins[index].ext || 'pdb';
        if (!! myData.proteins[index].isVariable) {
            var varname = myData.proteins[index].value.replace(/\W/g, '');
            if (window[varname] !== undefined) {
                return NGL.stageIds[myData.id].loadFile(new Blob([window[varname], {type: 'text/plain'}]), {ext: ext})
                    .then(function (protein) {
                        NGL.specialOps._run_loadFx(protein, myData.proteins[index].loadFx);
                    });
            } else { //async issue.
                setTimeout((option) => NGL.specialOps.load, 300);
            }
        }
        else if (typeof myData.proteins[index].value === 'string') {
            return NGL.stageIds[myData.id].loadFile(new Blob ([myData.proteins[index].value, { type: 'text/plain'}]), { ext: ext }).then(function (protein) {
            NGL.specialOps._run_loadFx(protein, myData.proteins[index].loadFx);});
        } else { //is a blob already
            return NGL.stageIds[myData.id].loadFile(myData.proteins[index].value, { ext: ext }).then(function (protein) {
            NGL.specialOps._run_loadFx(protein, myData.proteins[index].loadFx);});
        }
    }
    else if (myData.proteins[index].type === 'none') {
        myData.currentIndex = -1;  //pass. Super odd backdoor. Why is it needed? Let's keep it secret in case I think it's too weird.
    }
    else { //PDB code.
        return NGL.stageIds[myData.id].loadFile('rcsb://'+myData.proteins[index].value.replace('rcsb://','').toLowerCase().slice(0,4)).then(function (protein) {
            NGL.specialOps._run_loadFx(protein, myData.proteins[index].loadFx);});
    }
};

NGL.specialOps.showTitle = function (id, title) {
    // shows a temporary title, which is actually a label element with a for attribute pointing to the viewport id.
    // Consequently if one wanted to override it's location one could add <code>&lt;label for="viewport">&lt;/label></code> where desired.
    if (title) {
                    var titleEl = 'label[for="'+id+'"]';
                    if (! $(titleEl).length) {
                        $('#'+id).after('<label for="'+id+'" style="text-align: center; display: block;">TITLE</label>');
                    }
                    $(titleEl).html(title).fadeIn( 1000 ).fadeOut(1000);
                }

};

NGL.specialOps.multiLoader = function (id, proteins, backgroundColor, startIndex) {
    /*
    Note that the multiloader does not support multiple viewports.
    id is the id.
    proteins is a list of {name: 'unique_name', type: 'rcsb' (default) | 'file' | 'data', value: xxx, 'ext': 'pdb' , loadFx: xxx}
    where loadFx is the function to run after loading.
    background is a color (def white).
    The multiLoader calls the load function with an index of startIndex or zero.
    Do note that the function load returns a pr
     */
    startIndex = startIndex || 0;
    console.log('starting multiloader');
    console.log(proteins);
    // prevent body scrolling
    NGL.specialOps._preventScroll(id);
    // check for awkard case it has already been started.
    if (typeof window.myData === 'object') {window.myData.proteins.push(...proteins);}
    else {window.myData={currentIndex: -1, proteins: proteins, id: id, backgroundColor: backgroundColor || 'white'};}
    var img = $('#'+id+' img');
    if (img.length) {
        img.click(function () {NGL.specialOps.load(startIndex);});
    }
    else {return NGL.specialOps.load(startIndex);}
};

NGL.specialOps.postInitialise = function () {
    //this should not be used routinely!
    if (typeof window.myData === "undefined") {
        console.log('WARNING. initilise the scene with NGL.specialOps.multiLoader!');
        window.myData={currentIndex: -1, proteins: [], id: 'viewport', backgroundColor: 'white'};
        NGL.specialOps._preventScroll('viewport');
    }
};

NGL.specialOps._preventScroll = function (id) {
    $('#'+id).on( 'mousewheel DOMMouseScroll', function ( e ) {
            var e0 = e.originalEvent,
                delta = e0.wheelDelta || -e0.detail;
            this.scrollTop += ( delta < 0 ? 1 : -1 ) * 30;
            e.preventDefault();
        });
    // fix weid overflow.
    // something somewhere is adding an overflow hidden??
    setTimeout(() => $('#'+myData.id).css('overflow','visible'),1000)
};

///////////////////////////// NGL.Stage monkeypatching ///////////////

NGL.Stage.prototype.getComponentByType = function(type) {
    //gets first structure
    type = type || 'structure';
    for (var component in this.compList) {
        if (this.compList[component].type === type) {return this.compList[component]}
    }
    return undefined;
};

NGL.Stage.prototype.removeComponentsbyName = function (name) {
    // forEach on a shrinking list problem.
    var comps = this.getComponentsByName(name).list;
    var maxi = comps.length;
        for (var i=maxi; i >= 0; i--) {
                this.removeComponent(comps[i]);
        }
};

NGL.Stage.prototype.removeClashes = function () {
    // clashes are special as they have timers.
    if (! myData.spinningTimer) {return null;}
    this.removeComponentsbyName('clash');
    myData.spinningTimer.forEach(t => clearInterval(t));
    myData.spinningTimer =[];
};

///////////////////////////// activate data-toggle='protein' ///////////////

NGL.specialOps.prolink = function (prolink) { //prolink is a JQuery object.
    //parse
    var selection =$(prolink).data('selection'); //mandatory
    if (typeof selection === 'number') {selection = selection.toString()}
    var color = $(prolink).data('color'); //optional settings in methods
    var radius = $(prolink).data('radius');
    var tolerance = $(prolink).data('tolerance');
    var structure = $(prolink).data('load');
    var view = $(prolink).data('view');
    var id = 'viewport';
    if ($(prolink).data('target')) {id = $(prolink).data('target').replace('#','')}
    else if (!! $(prolink).attr('href') && !! $(prolink).attr('href').replace('#','')) { // # alone is not enough
        id = $(prolink).attr('href');
    }
    var title = $(prolink).data('title');
    var focus = $(prolink).data('focus') || 'domain'; // residue | domain | clash

    // title.
    NGL.specialOps.showTitle(id, title);

    // prep the action
    function move() {
        if (view === 'auto') { //special view case.
            NGL.getStage(id).autoView(2000);
        }
        else if (view === 'reset') { //special view case.
            if (typeof myData.proteins[myData.currentIndex].loadFx === 'function') {
                myData.proteins[myData.currentIndex].loadFx(NGL.getStage(id).getComponentByType('structure'));
            }
            else {
                NGL.getStage(id).getComponentByType('structure').autoView(2000);
            }
        } else if ((!! view) && (! selection)) {  //view, no selection.
            NGL.specialOps.slowOrient(id, view);
        }
        else if (focus === 'residue'){
            NGL.specialOps.showResidue(id, selection, color, radius, view);
        }
        else if (focus === 'domain' || focus === 'region'){
            NGL.specialOps.showDomain(id, selection, color, view);
        }
        else if (focus === 'clash'){
            NGL.specialOps.showClash(id, selection, color, radius, tolerance, view);
        }
        else if (focus === 'surface'){
            NGL.specialOps.showSurface(id, selection, view);
        }
        else if ((focus === 'blur') || (focus === 'bfactor')) {
            NGL.specialOps.showBlur(id,selection, color, radius, view);
        }
        else if (structure !== undefined) {}//change structure and nothing more.
        else {throw 'ValueError: odd data-focus tag.'}
    }

    // action!
    if (structure) {
        NGL.specialOps.load(structure).then(move);
    } else {move();}
};

$.prototype.protein = function (){
            $(this).click (function () {
                NGL.specialOps.prolink(this);
            });
};

$.prototype.viewport = function () {
        if (! $(this).length) {return undefined}
        // fix width:100%; height: 0; padding-bottom: 100%;
        if ($(this).has('img').length === 0) {
             if ($(this).width() === 0) {$(this).css('width','100%');}
             if ($(this).height() === 0) {
                 $(this).height($(this).width());
            $(this).css('padding-bottom','100%');
            console.log('new viewport sizes:');
            console.log($(this).width());
            console.log($(this).height());
             }
        }
        // sort attributes
        if (! $(this).attr('id')) {$(this).attr('id','NGLViewport')}
        var backgroundcolor = $(this).data('backgroundcolor') || 'white';
        var data = $(this).data('proteins');
        if (typeof data == "object") {/*pass*/}
        else if (data === 'ERROR') {throw 'The data-protein is attribute is literally ERROR'}
        else if (typeof data == "string") {data = JSON.parse(data.replace("'",'"'));}
        else if ($(this).data('load')) { data = $(this).data('load').split(',').map(v => ({name: v, value: v, type: 'rcsb'}));
        } else {data = [];}
        var promise = NGL.specialOps.multiLoader($(this).attr('id'), data, backgroundcolor);
        if ($(this).data('focus') || $(this).data('view')) {
            if ($(this).has('img').length !== 0) {
                $(this).children('img').on("click", e => setTimeout(() => NGL.specialOps.prolink(this), 500));
                //could this be done with a promise?
            }
            else {
                var prolink = this;
                promise.then(function () {
                    NGL.specialOps.prolink(prolink)}
                    )}
            }
    };


$(document).ready(function () {
    //activate prolinks
    $('[data-toggle="protein"]').protein();
    //activate viewport
    $('[role="NGL"],[role="proteinViewport"],[role="proteinviewport"],[role="protein_viewport"]').viewport();
});
